}
temp <- stepArchetypes(problem4, k = 1:10, nrep = 10, verbose = FALSE,
family = archetypesFamily("original",
zalphasfn = archetypes:::ginv.zalphasfn)
)
par(mfrow = c(2,2))
for (j in 1:4){
tempj <- bestModel(temp[[j]])
plot(problem4, xlim = c(0,20), ylim = c(0,25))
lines(problem4[chull(problem4),])
points(temp$archetypes, col = "red")
}
par(mfrow = c(2,2))
for (j in 1:4){
tempj <- bestModel(temp[[j]])
plot(problem4, xlim = c(0,20), ylim = c(0,25))
lines(problem4[chull(problem4),])
points(tempj$archetypes, col = "red")
}
temp <- stepArchetypes(problem4, k = 1:10, nrep = 10, verbose = FALSE,
family = archetypesFamily("original",
zalphasfn = archetypes:::ginv.zalphasfn)
)
par(mfrow = c(2,2))
for (j in 1:4){
tempj <- bestModel(temp[[j]])
plot(problem4, xlim = c(0,20), ylim = c(0,25))
lines(problem4[chull(problem4),])
points(tempj$archetypes, col = "red", cex = 1)
}
temp <- stepArchetypes(problem4, k = 1:8, nrep = 10, verbose = FALSE,
family = archetypesFamily("original",
zalphasfn = archetypes:::ginv.zalphasfn)
)
plot(problem4, xlim = c(0,20), ylim = c(0,25), cex = 0.5)
lines(problem4[chull(rep(problem4,2)),])
plot(problem4, xlim = c(0,20), ylim = c(0,25), cex = 0.5)
lines(problem4[chull(rep(problem4,2)),])
lines(problem4[rep(chull(problem4),2),])
screeplot(temp)
load("~/Documents/Teaching/Dimension Reduction - Fall 2019/Homework/Homework 2/pset2.Rdata")
digits8 <- digits8
digits8 <- digits$pixels[digits$labels == 8, ][1:100,]
test <- archetypes(digits8,2)
test <- archetypes(digits8,2,family = archetypesFamily("original", zalphasfn = archetypes:::ginv.zalphasfn))
test <- archetypes(digits8,3,family = archetypesFamily("original", zalphasfn = archetypes:::ginv.zalphasfn))
zerows <- which(colSums(digits8))
zerows <- which(colSums(digits8) == 0)
302/28
test <- archetypes(digits8[,-zerows],3,family = archetypesFamily("original", zalphasfn = archetypes:::ginv.zalphasfn))
temp <- rep(0,784); temp[-zerows] <- test$archetypes[1,]
image(matrix((temp),nrow=28))
temp <- rep(0,784); temp[-zerows] <- test$archetypes[2,]; image(matrix((temp),nrow=28))
temp <- rep(0,784); temp[-zerows] <- test$archetypes[3,]; image(matrix((temp),nrow=28))
test <- repArchetypes(digits8[,-zerows],1:5,family = archetypesFamily("original", zalphasfn = archetypes:::ginv.zalphasfn))
test <- stepArchetypes(digits8[,-zerows],1:5,family = archetypesFamily("original", zalphasfn = archetypes:::ginv.zalphasfn))
test <- stepArchetypes(digits8[,-zerows],k = 1:5,family = archetypesFamily("original", zalphasfn = archetypes:::ginv.zalphasfn))
temp <- bestModel(test[[5]])
temp2 <- rep(0,784); temp[-zerows] <- temp$archetypes[3,]; image(matrix((temp2),nrow=28))
temp <- bestModel(test[[5]])
temp2 <- rep(0,784); temp2[-zerows] <- temp$archetypes[3,]; image(matrix((temp2),nrow=28))
screeplot(test)
test <- stepArchetypes(digits8[,-zerows],k = 1:10,family = archetypesFamily("original", zalphasfn = archetypes:::ginv.zalphasfn))
screeplot(test)
test <- stepArchetypes(digits8[,-zerows],k = 1:20,family = archetypesFamily("original", zalphasfn = archetypes:::ginv.zalphasfn))
screeplot(test)
test <- stepArchetypes(digits8[,-zerows],k = 1:50,family = archetypesFamily("original", zalphasfn = archetypes:::ginv.zalphasfn), verbose = FALSE)
screeplot(test)
digits8 <- digits$pixels[digits$labels==8,][1:200,]
zerocol <- which(colSums(digits8)==0)
digits8<- digits8[,-zerocol]
NonMF <- nmf(, 1:10, nrep = 1, method = "Frobenius")
NonMF <- nmf(digits8, 1:10, nrep = 1, method = "Frobenius")
NonMF <- nmf(digits8, 1:5, nrun = 1, method = "Frobenius")
plot(NonMF$measures$residuals)
NonMF <- nmf(digits8, 1:25, nrun = 1, method = "Frobenius")
plot(NonMF$measures$residuals)
Arch <- stepArchetypes(digits8, k = 1:10, nrep = 1)
screeplot(NonMF)
screeplot(Arch)
plot(NonMF$measures$rss)
Arch <- stepArchetypes(digits8, k = 1:20, nrep = 1)
Arch <- stepArchetypes(digits8, k = 1:25, nrep = 10,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn)
)
temp <- NonMF$consensus$`25`
temp@H
temp <- coeff(NonMF$consensus$`25`)
temp <- coef(NonMF$consensus$`25`)
temp <- coef(NonMF$consensus$`25`)
temp <- NonMF$consensus$`25`
View(temp)
NonMF <- nmf(digits8, 1:5, nrun = 5, method = "Frobenius", .options='t')
coefmap(NonMF)
temp <- NonMF$fit
temp$`5`
temp <- temp$`5`
temp <- temp@fit@H
temp <- NonMF$fit$`5`@fit@H
example <- rep(0,784); example[-zerolcol] <- temp <- NonMF$fit$`5`@fit@H[1,]
example <- rep(0,784); example[-zerocol] <- temp <- NonMF$fit$`5`@fit@H[1,]
image(matrix(example, nrow = 28))
example <- rep(0,784); example[-zerocol] <- temp <- NonMF$fit$`5`@fit@H[2,]
image(matrix(example, nrow = 28))
example <- rep(0,784); example[-zerocol] <- temp <- NonMF$fit$`5`@fit@H[3,]
example <- rep(0,784); example[-zerocol] <- temp <- bestModel(Arch[[25]])$archetype
example <- rep(0,784); example[-zerocol] <- temp <- bestModel(Arch[[5]])$archetype
image(matrix(example, nrow = 28))
example <- rep(0,784); example[-zerocol] <- bestModel(Arch[[5]])$archetype
bestModel(Arch[[5]])$archetype
example <- rep(0,784); example[-zerocol] <- bestModel(Arch[[5]])$archetype[1,]
image(matrix(example, nrow = 28))
example <- rep(0,784); example[-zerocol] <- bestModel(Arch[[5]])$archetype[2,]
image(matrix(example, nrow = 28))
example <- rep(0,784); example[-zerocol] <- bestModel(Arch[[5]])$archetype[3,]
image(matrix(example, nrow = 28))
plot(Arch)
xyplot(Arch,digits8)
rm("Arch")
rm(mtcars)
rm(test,temp,tempj)
rm(problem9,problem2,NonMF,digits8)
rm(example, j, temp2,zerocol,zerows)
seq(5,23,2)
samplesizes < c( 5, 23, 7, 21, 9, 19, 11, 17, 13, 15)
samplesizes <- c( 5, 23, 7, 21, 9, 19, 11, 17, 13, 15)
probs <- c(5, 1, ,1, 1); probs <- probs/probs
probs <- c(5, 1, 1, 1); probs <- probs/probs
probs <- c(5, 1, 1, 1); probs <- probs/sum(probs)
rmultinom(1,samplesizes,probs)
rmultinom(10,samplesizes,probs)
problem3 <- matrix(0,nrow=10,ncol = 4)
for (j in 1:10){problem3[,j] <- rmultinom(1,samplesizes[j],probs) }
rmultinom(1, samplesizes[j], probs)
t(rmultinom(1, samplesizes[j], probs))
for (j in 1:10){problem3[,j] <- t(rmultinom(1,samplesizes[j],probs)) }
problem3[,j]
problem3 <- matrix(0,nrow=10,ncol = 4)
problem3
for (j in 1:10){problem3[,j] <- t(rmultinom(1,samplesizes[j],probs)) }
for (j in 1:10){problem3[j,] <- t(rmultinom(1,samplesizes[j],probs)) }
problem3
test <- nmf(problem3, 1)
test@fit@H/sum(test@fit@H)
samplesizes <- samplesizes + 10
for (j in 1:10){problem3[j,] <- t(rmultinom(1,samplesizes[j],probs)) }
test <- nmf(problem3, 1)
test@fit@H/sum(test@fit@H)
test <- nmf(problem3, 1, "Frobenius")
test@fit@H/sum(test@fit@H)
problem3.Frob <- nmf(problem3, 1, nrun = 25, method = "Frobenius")
problem3.Frob <- nmf(problem3, 1, nrun = 25, method = "Frobenius")
problem3.KL <- nmf(problem3, 1, nrun = 25, method = "KL")
problem3.Frob@residuals
problem3.KL@residuals
problem3.KL@fit@H/sum(problem3.KL@fit@H)
problem3.KL@fit@W*sum(problem3.KL@fit@H)
rm(problem3.Frob,problem3.KL, samplesizes,probs,j)
rm(test)
getwd()
setwd("~/Documents/Teaching/Dimension Reduction - Fall 2019/Homework/Homework 4/")
save.image("pset4.Rdata")
require("archetypes")
require("NMF")
require("grDevices")
load('pset4.Rdata')
digits8 <- digits$pixels[digits$labels==8,][1:200,]
zerocol <- which(colSums(digits8)==0)
digits8 <- digits8[,-zerocol]
Arch <- stepArchetypes(digits8[,-zerocol], k = 1:25, nrep = 10,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn),
verbose = FALSE
)
Arch <- stepArchetypes(digits8[,-zerocol], k = 1:2, nrep = 10,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn),
verbose = FALSE
)
## you may set verbose = TRUE to monitor the progress of the algorithm
Arch <- stepArchetypes(digits8[,-zerocol], k = 1:10, nrep = 10,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn),
verbose = FALSE
)
## you may set verbose = TRUE to monitor the progress of the algorithm
RSSs <- rep(0,25)
for (j in 1:10){ RSS[j] <- bestModel(Arch)[[j]]$rss }
RSSs <- rep(0,25)
for (j in 1:10){ RSSs[j] <- bestModel(Arch)[[j]]$rss }
plot(RSSs,
xlab = "Rank",
ylab = "Residuals")
#### sample for generating images ###
# example <- rep(0,784); example[-zerocol] <- bestModel(Arch[[25]])$archetype[3,]
# image(matrix(example, nrow = 28))
par(mar = c(1,1,1,1))
par(mfrow = c(5,5))
for (j in 1:10){
example <- rep(0,784); example[-zerocol] <- bestModel(Arch[[25]])$archetype[3,]
image(matrix(example, nrow = 28),
xaxt = 'n', yaxt = 'n')
}
#### sample for generating images ###
# example <- rep(0,784); example[-zerocol] <- bestModel(Arch[[25]])$archetype[3,]
# image(matrix(example, nrow = 28))
par(mar = c(1,1,1,1))
par(mfrow = c(5,5))
for (j in 1:10){
example <- rep(0,784); example[-zerocol] <- bestModel(Arch[[j]])$archetype[3,]
image(matrix(example, nrow = 28),
xaxt = 'n', yaxt = 'n')
}
#### sample for generating images ###
# example <- rep(0,784); example[-zerocol] <- bestModel(Arch[[25]])$archetype[3,]
# image(matrix(example, nrow = 28))
par(mar = c(1,1,1,1))
par(mfrow = c(5,5))
for (j in 1:10){
example <- rep(0,784); example[-zerocol] <- bestModel(Arch[[10]])$archetype[j,]
image(matrix(example, nrow = 28),
xaxt = 'n', yaxt = 'n')
}
length(bestModel(Arch[[10]])$archetype[j,])
digits8 <- digits$pixels[digits$labels==8,][1:200,]
zerocol <- which(colSums(digits8)==0)
digits8 <- digits8[,-zerocol]
test <- bestModel(Arch[[10]])
Arch <- stepArchetypes(digits8, k = 1:10, nrep = 10,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn),
verbose = FALSE
)
## you may set verbose = TRUE to monitor the progress of the algorithm
RSSs <- rep(0,25)
for (j in 1:10){ RSSs[j] <- bestModel(Arch)[[j]]$rss }
plot(RSSs,
xlab = "Rank",
ylab = "Residuals")
#### sample for generating images ###
# example <- rep(0,784); example[-zerocol] <- bestModel(Arch[[25]])$archetype[3,]
# image(matrix(example, nrow = 28))
par(mar = c(1,1,1,1))
par(mfrow = c(5,5))
for (j in 1:10){
example <- rep(0,784); example[-zerocol] <- bestModel(Arch[[10]])$archetype[j,]
image(matrix(example, nrow = 28),
xaxt = 'n', yaxt = 'n')
}
Arch <- stepArchetypes(digits8, k = 1:25, nrep = 10,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn),
verbose = FALSE
)
install.packages("eurodist")
knitr::opts_chunk$set(echo = TRUE)
library('MASS')
library("eurodist")
UScitiesD
knitr::opts_chunk$set(echo = TRUE)
library('MASS')
UScitiesD
city.loc <- cmdscale(UScitiesD, k =2);
plot(city.loc, type = 'n',
xlab = 'Dimension 1',
ylab = 'Dimension 2')
city.loc <- cmdscale(UScitiesD, k =2);
plot(city.loc, type = 'n',
xlab = 'Dimension 1',
ylab = 'Dimension 2')
text(city.loc, labels = names(UScitiesD))
View(city.loc)
city.loc <- cmdscale(UScitiesD, k =2);
plot(city.loc,
xlab = 'Dimension 1',
ylab = 'Dimension 2')
text(city.loc, labels = names(UScitiesD))
names(UScitiesD)
row.namesnames(UScitiesD)
row.names(UScitiesD)
col.names(UScitiesD)
View(UScitiesD)
names(UScitiesD)
row.names(UScitiesD)
city.loc <- cmdscale(UScitiesD, k =2);
plot(city.loc,
xlab = 'Dimension 1',
ylab = 'Dimension 2')
text(city.loc, labels = row.names(UScitiesD))
test <- UScitiesD
test
row.names(test)
col.names(test)
dist_setNames(test)
attr(test)
attr(test, "Labels")
city.loc <- cmdscale(UScitiesD, k =2);
plot(city.loc,
xlab = 'Dimension 1',
ylab = 'Dimension 2')
text(city.loc, labels = attr(test, "Labels"))
city.loc <- cmdscale(UScitiesD, k =2);
plot(city.loc, type = 'n',
xlab = 'Dimension 1',
ylab = 'Dimension 2')
text(city.loc, labels = attr(test, "Labels"))
plot(city.loc $*$ matrix(c(0,-1,-1,0),nrow = 2), type = 'n',
plot(city.loc %*% matrix(c(0,-1,-1,0),nrow = 2), type = 'n',
xlab = 'Dimension 1',
ylab = 'Dimension 2')
text(city.loc, labels = attr(test, "Labels"))
city.loc.rot <- city.loc %*% matrix(c(0,-1,-1,0), nrow = 2)
plot(city.loc.rot, type = 'n',
xlab = 'Dimension 1',
ylab = 'Dimension 2')
text(city.loc.rot, labels = attr(test, "Labels"))
matrix(c(0,-1,-1,0), nrow = 2)
# city.loc.rot <- city.loc %*% matrix(c(0,-1,-1,0), nrow = 2)
city.loc.rot <- -city.loc
plot(city.loc.rot, type = 'n',
xlab = 'Dimension 1',
ylab = 'Dimension 2')
text(city.loc.rot, labels = attr(test, "Labels"))
knitr::opts_chunk$set(echo = TRUE)
library('MASS')
library('maps')
city.loc <- cmdscale(UScitiesD, k =2);
plot(city.loc, type = 'n',
xlab = 'Dimension 1',
ylab = 'Dimension 2')
text(city.loc, labels = attr(test, "Labels"))
map("state"")
city.loc <- cmdscale(UScitiesD, k =2);
plot(city.loc, type = 'n',
xlab = 'Dimension 1',
ylab = 'Dimension 2')
text(city.loc, labels = attr(test, "Labels"))
map("state)
city.loc <- cmdscale(UScitiesD, k =2);
plot(city.loc, type = 'n',
xlab = 'Dimension 1',
ylab = 'Dimension 2')
text(city.loc, labels = attr(test, "Labels"))
map("state")
eurodist
city.loc <- cmdscale(eurodist)
plot(city.loc, type = 'n',
xlab = 'Dimension 1',
ylab = 'Dimension 2')
text(city.loc, labels = attr(eurodist, "Labels"))
plot(-city.loc, type = 'n',
xlab = 'Dimension 1',
ylab = 'Dimension 2')
text(-city.loc, labels = attr(eurodist, "Labels"))
city.loc.flip <- city.loc %*% matrix(c(1,0,0,-1),nrow = 2)
plot(city.loc.flip, type = 'n',
xlab = 'Dimension 1',
ylab = 'Dimension 2')
text(city.loc.flip, labels = attr(eurodist, "Labels"))
# city.loc.rot <- city.loc %*% matrix(c(0,-1,-1,0), nrow = 2)
city.loc.rot <- -city.loc
# par(mar = c(1,1,1,1))
# par(mfrow = c(2,1))
plot(city.loc.rot, type = 'n',
xlab = 'Dimension 1',
ylab = 'Dimension 2')
text(city.loc.rot, labels = attr(UScitiesD, "Labels"),
cex = 0.5)
# map("state")
# city.loc.rot <- city.loc %*% matrix(c(0,-1,-1,0), nrow = 2)
city.loc.rot <- -city.loc
# par(mar = c(1,1,1,1))
# par(mfrow = c(2,1))
plot(city.loc.rot, type = 'n',
xlab = 'Dimension 1',
ylab = 'Dimension 2')
text(city.loc.rot, labels = attr(UScitiesD, "Labels"),
cex = 0.75)
# map("state")
Arch <- stepArchetypes(digits8, k = 1:25, nrep = 10,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn),
verbose = FALSE
)
Arch <- stepArchetypes(digits8, k = 1:25, nrep = 10,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn),
verbose = FALSE
)
Arch <- stepArchetypes(digits8, k = 1:20, nrep = 10,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn),
verbose = FALSE
)
## you may set verbose = TRUE to monitor the progress of the algorithm
RSSs <- rep(0,25)
for (j in 1:20){ RSSs[j] <- bestModel(Arch)[[j]]$rss }
plot(RSSs,
xlab = "Rank",
ylab = "Residuals")
#### sample for generating images ###
# example <- rep(0,784); example[-zerocol] <- bestModel(Arch[[25]])$archetype[3,]
# image(matrix(example, nrow = 28))
par(mar = c(1,1,1,1))
par(mfrow = c(5,5))
for (j in 1:20){
example <- rep(0,784); example[-zerocol] <- bestModel(Arch[[10]])$archetype[j,]
image(matrix(example, nrow = 28),
xaxt = 'n', yaxt = 'n')
}
#### sample for generating images ###
# example <- rep(0,784); example[-zerocol] <- bestModel(Arch[[25]])$archetype[3,]
# image(matrix(example, nrow = 28))
par(mar = c(1,1,1,1))
par(mfrow = c(5,5))
for (j in 1:20){
example <- rep(0,784); example[-zerocol] <- bestModel(Arch[[20]])$archetype[j,]
image(matrix(example, nrow = 28),
xaxt = 'n', yaxt = 'n')
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
svd(A)$d
sqrt(test$sdev^2+1)
sqrt(test$sdev^2-1)
sqrt(svd(A)$d^2+1)
test$sdev
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
svd(A)$d
sqrt(svd(A)$d^2+1)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
test$sdev^2
svd(A)$d^2 + 1
N <- 100; X <- svd(matrix(rnorm(10*N),ncol = 10))$u
source('~/.active-rstudio-document', echo=TRUE)
test$sdev
round(test$sdev,2)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
var(X)
diag(var(X))
sqrt(diag(var(X)))
svd(A)$d
round(test$sdev,2)
View(test$rotation)
View(round(test$rotation,1))
View(round(test$rotation,1), cor = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(round(test$rotation,1))
View(round(test$rotation,4))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
test2 <- svd(X)$v
rbind(test2,A %*% test2) - test$rotation[,1:10]
source('~/.active-rstudio-document', echo=TRUE)
var(Z) %*% rbind(test2[,1], A %*% test2[,1])
rbind(test2[,1], A %*% test2[,1])
A %*% test2[,1]
svd(A)$v
svd(A)$v[,1]
t(svd(A)$v[,1])
rbind(svd(A)$v[,1], -A %*% svd(A)$v[,1])
source('~/.active-rstudio-document', echo=TRUE)
svd(A)$v[,1]
-A %*% svd(A)$v[,1]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
M
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
prcomp(Z)$sdev
test <- prcomp(Z)
test$rotation[,13]
test$rotation[,13]/(M%*% svd(A)$[v,1])
test$rotation[,13]/(M%*% svd(A)$v[,1])
test$rotation[,11]/(M%*% svd(A)$v[,1])
test$rotation[,12]/(M%*% svd(A)$v[,1])
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
