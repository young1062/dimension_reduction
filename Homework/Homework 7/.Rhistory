A <- exp(-as.matrix(dist(rings))/0.01)
L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = ''
)
A <- exp(-as.matrix(dist(rings))/0.05)
L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = ''
)
A <- exp(-as.matrix(dist(spiral))/0.05)
A <- exp(-as.matrix(dist(spiral))/0.05)
A <- exp(-as.matrix(dist(spirals))/0.05)
L <- diag( as.vector(A %*% matrix(1,nrow = dim(spirals)[1], ncol = 1)) ) - A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = ''
)
A <- exp(-as.matrix(dist(spirals))/1)
L <- diag( as.vector(A %*% matrix(1,nrow = dim(spirals)[1], ncol = 1)) ) - A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = ''
)
plot(eigen(L)$values)
plot(sort(eigen(L)$values ) )
plot(sort(eigen(L)$values )[1:20] )
plot(sort(eigen(L)$values )[1:10] )
A <- exp(-as.matrix(dist(spirals))/5)
L <- diag( as.vector(A %*% matrix(1,nrow = dim(spirals)[1], ncol = 1)) ) - A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = ''
)
plot(sort(eigen(L)$values )[1:10] )
test <- specc(spirals, centers = 2)
A <- exp(-as.matrix(dist(spirals))/184)
L <- diag( as.vector(A %*% matrix(1,nrow = dim(spirals)[1], ncol = 1)) ) - A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = ''
)
plot(sort(eigen(L)$values )[1:10] )
plot(sort(eigen(L)$values ) )
View(eigen(L)$values)
A <- exp(-as.matrix(dist(rings))/0.05)
L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = ''
)
plot(sort(eigen(L)$values)[1:10] )
test <- specc(ringss, centers = 3)
test <- specc(rings, centers = 3)
A <- exp(-as.matrix(dist(rings))/19.7)
L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = ''
)
plot(sort(eigen(L)$values)[1:10] )
plot(rings, xlab = '', ylab = '', main = 'Spectral Clustering',
col = c("red","blue","black")[specc(rings, centers = 3)@.Data)
plot(rings, xlab = '', ylab = '', main = 'Spectral Clustering',
col = c("red","blue","black")[specc(rings, centers = 3)@.Data])
knitr::opts_chunk$set(echo = FALSE, message = FALSE, cache = TRUE, fig.align = 'center')
require(MASS)
require(ggplot2)
require(mclust)
require(cluster)
require(kernlab)
require(scatterplot3d)
myColorRamp <- function(colors, values) {
v <- (values - min(values))/diff(range(values))
x <- colorRamp(colors)(v)
rgb(x[,1], x[,2], x[,3], maxColorValue = 255)
}
A <- exp(-as.matrix(dist(rings))/19.7)
L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '', col = myColorRamp(c("white","black"), L)
)
A <- exp(-as.matrix(dist(rings))/19.7)
L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '', col = myColorRamp(c("white","black"), log(L))
)
A <- exp(-as.matrix(dist(rings))/19.7)
L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = log(L[,(3*N):1]),
xlab = '', ylab = '', col = myColorRamp(c("white","black"), log(L))
)
A <- exp(-as.matrix(dist(rings))/19.7)
L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '', col = myColorRamp(c("white","black"), L^(1/5))
)
myColorRamp(c("white","black"), L)
A <- exp(-as.matrix(dist(rings))/19.7)
L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '', col = myColorRamp(c("white","black"), L)
)
A <- exp(-as.matrix(dist(rings))/1)
L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '', col = myColorRamp(c("white","black"), L)
)
A <- exp(-as.matrix(dist(rings))/100)
L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '', col = myColorRamp(c("white","black"), L)
)
plot(sort(eigen(L)$values)[1:10] )
View(eigen(L)$values)
View(L)
View(A)
A <- exp(-as.matrix(dist(rings))/0.001)
L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '', col = myColorRamp(c("white","black"), L)
)
A <- exp(-as.matrix(dist(rings))/0.001)
# L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
L <- diag(rep(1, dim(rings)[1]) )
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '', col = myColorRamp(c("white","black"), L)
)
dim(L)
A <- exp(-as.matrix(dist(rings))/0.001)
# L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
L <- diag(rep(1, dim(rings)[1]) ) - diag( 1/as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) %*% A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '', col = myColorRamp(c("white","black"), L)
)
N <- 10
theta <- runif(3*N, min = 0, max = 2*pi);
r = c(runif(N, min = 0.9,max = 1.1),runif(N, min = 1.9,max = 2.1),runif(N, min = 2.9,max = 3.1) )
rings <-  cbind(cos(theta),sin(theta)) * cbind(r,r)
plot(rings)
A <- exp(-as.matrix(dist(rings))/0.001)
# L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
L <- diag(rep(1, dim(rings)[1]) ) - diag( 1/as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) %*% A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '', col = myColorRamp(c("white","black"), L)
)
diag( 1/as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) %*% A
View(diag( 1/as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) %*% A)
plot(sort(eigen(L)$values)[1:10] )
A <- exp(-as.matrix(dist(rings))/1)
# L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
L <- diag(rep(1, dim(rings)[1]) ) - diag( 1/as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) %*% A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '', col = myColorRamp(c("white","black"), L)
)
N <- 30
theta <- runif(3*N, min = 0, max = 2*pi);
r = c(runif(N, min = 0.9,max = 1.1),runif(N, min = 1.9,max = 2.1),runif(N, min = 2.9,max = 3.1) )
rings <-  cbind(cos(theta),sin(theta)) * cbind(r,r)
plot(rings)
A <- exp(-as.matrix(dist(rings))/1)
# L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
L <- diag(rep(1, dim(rings)[1]) ) - diag( 1/as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) %*% A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '', col = myColorRamp(c("white","black"), L)
)
plot(sort(eigen(L)$values)[1:10] )
A <- exp(-as.matrix(dist(rings))/19)
# L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
L <- diag(rep(1, dim(rings)[1]) ) - diag( 1/as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) %*% A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '', col = myColorRamp(c("white","black"), L)
)
plot(sort(eigen(L)$values)[1:10] )
sig <- 20
A <- exp(-sig * as.matrix(dist(rings)))
# L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
L <- diag(rep(1, dim(rings)[1]) ) - diag( 1/as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) %*% A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '', col = myColorRamp(c("white","black"), L)
)
plot(sort(eigen(L)$values)[1:10] )
sig <- 20
A <- exp(- sig * as.matrix(dist(rings)))
# L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
L <- diag(rep(1, dim(rings)[1]) ); # - diag( 1/as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) %*% A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '', col = myColorRamp(c("white","black"), L)
)
sig <- 20
A <- exp(- sig * as.matrix(dist(rings)))
# L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
L <- diag(rep(1, dim(rings)[1]) ); # - diag( 1/as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) %*% A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '',
)
sig <- 20
A <- exp(- sig * as.matrix(dist(rings)))
# L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
L <- diag(rep(1, dim(rings)[1]) ) - diag( 1/as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) %*% A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '',
)
sig <- 1/20
A <- exp(- sig * as.matrix(dist(rings)))
# L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
L <- diag(rep(1, dim(rings)[1]) ) - diag( 1/as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) %*% A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '',
)
plot(sort(eigen(L)$values)[1:10] )
sig <- 20
A <- exp(- sig * as.matrix(dist(rings)))
# L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
L <- diag(rep(1, dim(rings)[1]) ) - diag( 1/as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) %*% A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '',
)
N <- 50
theta <- runif(3*N, min = 0, max = 2*pi);
r = c(runif(N, min = 0.9,max = 1.1),runif(N, min = 1.9,max = 2.1),runif(N, min = 2.9,max = 3.1) )
rings <-  cbind(cos(theta),sin(theta)) * cbind(r,r)
plot(rings)
sig <- 20
A <- exp(- sig * as.matrix(dist(rings)))
# L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
L <- diag(rep(1, dim(rings)[1]) ) - diag( 1/as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) %*% A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '',
)
sig <- 20
A <- exp(- sig * as.matrix(dist(rings)))
# L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
L <- diag(rep(1, dim(rings)[1]) ) - diag( 1/as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) %*% A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = ''
)
plot(sort(eigen(L)$values)[1:10] )
sig <- 20
A <- exp(- sig * as.matrix(dist(rings)))
# L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
L <- diag(rep(1, dim(rings)[1]) ) - diag( 1/as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) %*% A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '', xaxt = 'n', yaxt = 'n',
)
sig <- 20
A <- exp(- sig * as.matrix(dist(rings)))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
# L <- diag(rep(1, dim(rings)[1]) ) - diag( 1/as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) %*% A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '', xaxt = 'n', yaxt = 'n',
)
plot(sort(eigen(L)$values)[1:10] )
sig <- 200
A <- exp(- sig * as.matrix(dist(rings)))
# graph Laplacian
L <- diag( as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) - A
# normalized graph Laplacian
# L <- diag(rep(1, dim(rings)[1]) ) - diag( 1/as.vector(A %*% matrix(1,nrow = dim(rings)[1], ncol = 1)) ) %*% A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = '', xaxt = 'n', yaxt = 'n'
)
plot(sort(eigen(L)$values)[1:10] )
sig <- 200
A <- exp(- sig * as.matrix(dist(sprials)))
sig <- 200
A <- exp(- sig * as.matrix(dist(spirils)))
sig <- 200
A <- exp(- sig * as.matrix(dist(spirals)))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(spirals)[1], ncol = 1)) ) - A
im <- image(x = seq(1,3*N,1), y = seq(1,3*N,1), z = L[,(3*N):1],
xlab = '', ylab = ''
)
sig <- 200
A <- exp(- sig * as.matrix(dist(spirals)))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(spirals)[1], ncol = 1)) ) - A
im <- image(x = seq(1,dim(spirals)[1],1), y = seq(1,im(spirals)[1],1), z = L[,im(spirals)[1]:1],
xlab = '', ylab = ''
)
sig <- 200
A <- exp(- sig * as.matrix(dist(spirals)))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(spirals)[1], ncol = 1)) ) - A
im <- image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = L[,dim(spirals)[1]:1],
xlab = '', ylab = ''
)
sig <- 2
A <- exp(- sig * as.matrix(dist(spirals)))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(spirals)[1], ncol = 1)) ) - A
im <- image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = L[,dim(spirals)[1]:1],
xlab = '', ylab = ''
)
plot(sort(eigen(L)$values)[1:10] )
sig <- 20
A <- exp(- sig * as.matrix(dist(spirals)))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(spirals)[1], ncol = 1)) ) - A
im <- image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = L[,dim(spirals)[1]:1],
xlab = '', ylab = ''
)
plot(sort(eigen(L)$values)[1:10] )
sig <- 2000
A <- exp(- sig * as.matrix(dist(spirals)))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(spirals)[1], ncol = 1)) ) - A
im <- image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = L[,dim(spirals)[1]:1],
xlab = '', ylab = ''
)
plot(sort(eigen(L)$values)[1:10] )
sig <- 20
A <- exp(- sig * as.matrix(dist(spirals)))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(spirals)[1], ncol = 1)) ) - A
im <- image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = L[,dim(spirals)[1]:1],
xlab = '', ylab = ''
)
plot(sort(eigen(L)$values)[1:10] )
sig <- 20
A <- exp(- sig * as.matrix(dist(cassini)))
knitr::opts_chunk$set(echo = FALSE, cache = TRUE, message = FALSE, fig.align = 'center')
set.seed(1) # for reproducibility of results
require(mclust)
require(cluster)
require(kernlab)
require(scatterplot3d)
load("pset7.rData")
myColorRamp <- function(colors, values) {
v <- (values - min(values))/diff(range(values))
x <- colorRamp(colors)(v)
rgb(x[,1], x[,2], x[,3], maxColorValue = 255)
}
sig <- 20
A <- exp(- sig * as.matrix(dist(cassini)))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(spirals)[1], ncol = 1)) ) - A
sig <- 20
A <- exp(- sig * as.matrix(dist(cassini)))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(cassini)[1], ncol = 1)) ) - A
plot(sort(eigen(L)$values)[1:10]
sig <- 20
A <- exp(- sig * as.matrix(dist(cassini)))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(cassini)[1], ncol = 1)) ) - A
plot(sort(eigen(L)$values)[1:10] )
sig <- 20
A <- exp(- sig * as.matrix(dist(smile)))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(smile)[1], ncol = 1)) ) - A
plot(sort(eigen(L)$values)[1:10] )
sig <- 150
A <- exp(- sig * as.matrix(dist(smile)))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(smile)[1], ncol = 1)) ) - A
plot(sort(eigen(L)$values)[1:10] )
sig <- 800
A <- exp(- sig * as.matrix(dist(cassini)))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(cassini)[1], ncol = 1)) ) - A
plot(sort(eigen(L)$values)[1:10] )
sig <- 1/800
A <- exp(- sig * as.matrix(dist(cassini)))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(cassini)[1], ncol = 1)) ) - A
plot(sort(eigen(L)$values)[1:10] )
sig <- 800
A <- exp(- sig * as.matrix(dist(cassini)))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(cassini)[1], ncol = 1)) ) - A
plot(sort(eigen(L)$values)[1:10] )
set.seed(1)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, cache = FALSE, fig.align = 'center')
require(MASS)
require(ggplot2)
require(mclust)
require(cluster)
require(kernlab)
require(scatterplot3d)
require(gtools)
require(mlbench)
myColorRamp <- function(colors, values) {
v <- (values - min(values))/diff(range(values))
x <- colorRamp(colors)(v)
rgb(x[,1], x[,2], x[,3], maxColorValue = 255)
}
data("spirals")
spirals[ permute(1:dim(spirals)[1]), ] <- spirals
plot(spirals, xlab = '', ylab ='')
spiral.spec <- specc(spirals, centers = 2)
plot(spirals, xlab = '', ylab = '', main = 'Spectral Clustering',
col = c("red","blue")[spiral.spec@.Data])
# sig <- 1/spiral.spec@kernelf@kpar$sigma
sig <- spiral.spec@kernelf@kpar$sigma
# sig <- 1/(2*spiral.spec@kernelf@kpar$sigma^2)
A <- exp(- sig * as.matrix(dist(spirals)^2) ); diag(A) <- 0
# delete non-nearest neighbors
# k <- 3
# for (j in 1:dim(A)[1]){
#   A[j, which(A[j,] > sort(A[j,])[k]) ] <- 0
# }
Deg <- as.vector(A %*% matrix(1,nrow = dim(spirals)[1], ncol = 1))
# unnormalized
L <- diag( Deg ) - A
# symmetric normalized
# L <- diag(rep(1,dim(spirals)[1])) - diag(Deg^(-1/2)) %*% A %*% diag(Deg^(-1/2))
# RW normalized
# L <- diag(rep(1,dim(spirals)[1])) - diag(D^(-1)) %*% A
Aperm <- 0*A;
for (j in 1:2){
for (k in 1:2){
Aperm[((j-1)*150+1):(j*150), ((k-1)*150+1):(k*150)] <- A[which(spiral.spec@.Data == j), which(spiral.spec@.Data == k )]
}
}
Lperm <- diag( as.vector(Aperm %*% matrix(1,nrow = dim(spirals)[1], ncol = 1)) ) - Aperm
par(mfrow = c(2,2))
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = A[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Affinity Matrix", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = L[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Graph Laplacian", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = Aperm[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Permuted Affinity Matrix", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = Lperm[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Permuted Graph Laplacian", xaxt = 'n', yaxt = 'n'
)
plot(sort(svd(L)$d)[1:10], ylab = "Eigenvalues" )
# sig <- 1/spiral.spec@kernelf@kpar$sigma
sig <- spiral.spec@kernelf@kpar$sigma
# sig <- 1/(2*spiral.spec@kernelf@kpar$sigma^2)
A <- exp(- sig * as.matrix(dist(spirals)^2) ); diag(A) <- 0
# delete non-nearest neighbors
# k <- 3
# for (j in 1:dim(A)[1]){
#   A[j, which(A[j,] > sort(A[j,])[k]) ] <- 0
# }
Deg <- as.vector(A %*% matrix(1,nrow = dim(spirals)[1], ncol = 1))
# unnormalized
L <- diag( Deg ) - A
# symmetric normalized
# L <- diag(rep(1,dim(spirals)[1])) - diag(Deg^(-1/2)) %*% A %*% diag(Deg^(-1/2))
# RW normalized
# L <- diag(rep(1,dim(spirals)[1])) - diag(D^(-1)) %*% A
Aperm <- 0*A;
for (j in 1:2){
for (k in 1:2){
Aperm[((j-1)*150+1):(j*150), ((k-1)*150+1):(k*150)] <- A[which(spiral.spec@.Data == j), which(spiral.spec@.Data == k )]
}
}
Lperm <- diag( as.vector(Aperm %*% matrix(1,nrow = dim(spirals)[1], ncol = 1)) ) - Aperm
par(mfrow = c(2,2))
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = A[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Affinity Matrix", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = L[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Graph Laplacian", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = Aperm[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Permuted Affinity Matrix", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = Lperm[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Permuted Graph Laplacian", xaxt = 'n', yaxt = 'n'
)
plot(sort(svd(L)$d)[1:10], ylab = "Eigenvalues" )
sig <-800
A <- exp(-  sig * as.matrix(dist(cassini)^2))
knitr::opts_chunk$set(echo = FALSE, cache = TRUE, message = FALSE, fig.align = 'center')
# set.seed(1) # for reproducibility of results
require(mclust)
require(cluster)
require(kernlab)
require(scatterplot3d)
load("pset7.rData")
myColorRamp <- function(colors, values) {
v <- (values - min(values))/diff(range(values))
x <- colorRamp(colors)(v)
rgb(x[,1], x[,2], x[,3], maxColorValue = 255)
}
get_mode <- function(data){
# assumes there is a unique mode
un <- unique(data)
mo <- un[1]
if (length(un) == 1){mo = un}
else {
for (j in 2:length(un)){
if (sum(data == un[j]) > sum(data == mo)){ mo <- un[j]}
}
}
return(mo);
}
sig <-800
A <- exp(-  sig * as.matrix(dist(cassini)^2))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(cassini)[1], ncol = 1)) ) - A
plot(sort(svd(L)$d)[1:50], ylab = "Eigenvalues"  )
sig <- 1/(2*800^2)
A <- exp(-  sig * as.matrix(dist(cassini)^2))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(cassini)[1], ncol = 1)) ) - A
plot(sort(svd(L)$d)[1:50], ylab = "Eigenvalues"  )
sig <- 800
A <- exp(-  sig * as.matrix(dist(cassini)^2))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(cassini)[1], ncol = 1)) ) - A
plot(sort(svd(L)$d)[1:50], ylab = "Eigenvalues"  )
sig <- 150
A <- exp(- sig*as.matrix(dist(smile)^2)  )
L <- diag( as.vector(A %*% matrix(1,nrow = dim(smile)[1], ncol = 1)) ) - A
plot(sort(svd(L)$d)[1:10], ylab = "Eigenvalues"  )
test <- specc(smile, center = 4)
sig <- 154
A <- exp(- sig*as.matrix(dist(smile)^2)  )
L <- diag( as.vector(A %*% matrix(1,nrow = dim(smile)[1], ncol = 1)) ) - A
plot(sort(svd(L)$d)[1:10], ylab = "Eigenvalues"  )
sort(svd(L)$d)[1:10]
log1p(sort(svd(L)$d)[1:10])
sig <- 154
A <- exp(- sig*as.matrix(dist(smile)^2)  )
L <- diag( as.vector(A %*% matrix(1,nrow = dim(smile)[1], ncol = 1)) ) - A
plot(log(sort(svd(L)$d)[1:10]), ylab = "Eigenvalues"  )
sig <- 154
A <- exp(- sig*as.matrix(dist(smile)^2)  )
L <- diag( as.vector(A %*% matrix(1,nrow = dim(smile)[1], ncol = 1)) ) - A
plot(log(sort(svd(L)$d)[1:10]), ylab = "log(Eigenvalues)"  )
sig <- 800
A <- exp(-  sig * as.matrix(dist(cassini)^2))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(cassini)[1], ncol = 1)) ) - A
plotlog(sort(svd(L)$d)[1:10]), ylab = "Eigenvalues"  )
sig <- 800
A <- exp(-  sig * as.matrix(dist(cassini)^2))
L <- diag( as.vector(A %*% matrix(1,nrow = dim(cassini)[1], ncol = 1)) ) - A
plot(log(sort(svd(L)$d)[1:10]), ylab = "Eigenvalues"  )
