N <- 1e4; # set number of subjects in bivariate gaussian case study
sample_per_subject <- 25 # set number of samples per subject in bivariate gaussian case study
K <- 1:2; # set number of NN to use in estimates
set.seed(1)
M <- length(K) # number of subgroups to split intra-subject samples into
obs <- data.frame(
# Nimax = sample(20:100, N, replace = TRUE),
Nimax = rep(sample_per_subject, N),
M = rep(M, N),
rhoxy = runif(N) )
obs$MI <- -0.5*log(1- obs$rhoxy^2)
obs$MIhat <- obs$K <- matrix(NA, nrow = N, ncol = M)
obs$Ni <- rep(NA,N)
p <- ggplot(data.frame(sample = obs$MI,
grid = seq(from = min(0), to = max(obs$MI), length.out = N),
true = density.MI.rho(seq(from = min(0), to = max(obs$MI), length.out = N)) ),
aes(x= sample) ) +
geom_density(aes(x = sample, colour = "Empirical Density") ) +
geom_line(aes(x=grid, y = true, colour = "True Density")) +
scale_color_manual(name = "", values = c("red","blue")) +
xlab("Mutual Information") +
ylab("")  + coord_cartesian(xlim = range(obs$MI), ylim = c(0,5))
print(p)
source("~/Documents/Research/information_estimation/KLkNN.R")
for (n in 1:N){
draw <- t(mvrnorm(obs$Nimax[n], cbind(0,0), matrix(c(1, obs$rhoxy[n], obs$rhoxy[n], 1),ncol = 2))) # draw samples
obs$Ni[n] <- obs$Nimax[n];
obs$K[n,] <- K
for (m in 1:M){ # compute MI estimates from subsamples
obs$MIhat[n,m] <- KLkNN(draw[1,(1:obs$Ni[n])],
draw[2,(1:obs$Ni[n])],
K = K[m])
}
}
df <- data.frame(x=(obs$MIhat[,1]-obs$MI)/obs$K[,1], y = (obs$MIhat[,2]-obs$MI)/obs$K[,2])
> ggplot(df, aes(x=x,y=y)) + geom_bin2d()
ggplot(df, aes(x=x,y=y)) + geom_bin2d()
galaxy <- read.csv(url("https://astrostatistics.psu.edu/datasets/COMBO17.csv"))
problem9.X <- galaxy[,c("UjMAG","BjMAG","VjMAG","usMAG","gsMAG","rsMAG",
"UbMAG","BbMAG","VnMAG","S280MAG","W420FE","W462FE",
"W485FD","W518FE","W571FS","W604FE","W646FD","W696FE",
"W753FE","W815FS","W856FD","W914FD","W914FE")]
problem9.Y <- galaxy[,c("Rmag","ApDRmag","mumax","Mcz","MCzml","chi2red")]
CCA.9 <- cc(problem9.X,problem9.Y)
set.seed(1) # for reproducibility of results
require("MASS")
require("CCA")
load("pset3.Rdata")
CCA.9 <- cc(problem9.X,problem9.Y)
CCA.9$cor
par(mfrow=c(2,3))
for (j in 1:6){
plot(CCA.9$scores$xscores[,j],CCA.9$scores$yscores[,j],
xlab = bquote(paste('x',[.(j)])),
bquote(paste('x',[.(j)]))
par(mfrow=c(2,3))
for (j in 1:6){
plot(CCA.9$scores$xscores[,j],CCA.9$scores$yscores[,j],
xlab = bquote(paste('x'[.(j)])),
ylab = bquote(paste('y'[.(j)])),
)
}
Seta <- var(CCA.9$scores$xscores)
Sxi  <- var(CCA.9$scores$yscores)
print(Seta)
print(Sxi)
Seta <- round(var(CCA.9$scores$xscores),2)
Sxi  <- round(var(CCA.9$scores$yscores),2)
Seta <- round(var(CCA.9$scores$xscores),2)
Sxi  <- round(var(CCA.9$scores$yscores),2)
Sxi  <- round(var(CCA.9$scores$yscores),2)
print(Sxi)
Seta <- round(var(CCA.9$scores$xscores),2)
print(Seta)
Setaxi <- round(var(CCA.9$scores$xscores,CCA.9$scores$yscores),2)
print(Setaxi)
set.seed(1) # for reproducibility of results
require("MASS")
require("CCA")
load("pset3.Rdata")
problem5.X <- matrix(rnorm(1000*10),nrow = 1000)
problem5.Y <- A %*% problem5.X
problem5.X <- matrix(rnorm(1000*10),nrow = 1000)
problem5.Y <- problem5.X %*% t(A)
CCA.5 <- cc(problem5.X,problem5.Y)
print(CCA.5$cor)
test <- svd(matrix(0.5,nrow = 2, ncol = 2))
test$u
test$v
u <- sqrt(2)/2*matrix(1,nrow = 2, ncol = 2); u[2,2] <- -u[2,2]
u %*% diag(c(1,0)) %*% t(u)
CCA.6 <- cc(problem6.X,problem6.Y)
SVD.A <- svd(A)
rho2 <- mean(SVD.A$d/CCA.6^2)
CCA.6 <- cc(problem6.X,problem6.Y)
SVD.A <- svd(A)
rho2 <- mean(SVD.A$d/CCA.6$cor^2)
CCA.6 <- cc(problem6.X,problem6.Y)
SVD.A <- svd(A)
rho2 <- mean(SVD.A$d^2/CCA.6$cor^2-SVD.A$d^2)
SVD.A$d^2/CCA.6$cor^2
SVD.A$d^2
CCA.6$cor^2
set.seed(1) # for reproducibility of results
require("MASS")
require("CCA")
load("pset3.Rdata")
sum(abs(problem6.Y - problem6.X %*% t(A)))
test <- svd(matrix(0.5,nrow = 2, ncol = 2))
test <- svd(matrix(1,nrow = 2, ncol = 2))
load("pset3.Rdata")
require("CCA")
CCA.6 <- cc(problem6.X,problem6.Y)
problem6.Y <- problem6.X %*% t(A) + matrix(rnorm(1000*5),nrow = 1000)
CCA.6 <- cc(problem6.X,problem6.Y)
SVD.A <- svd(A)
CCA.6$cor^2/SVD.A$d^2 - SVD.A$d^2
SVD.A$d^2/CCA.6^2 - SVD.A$d^2
SVD.A$d^2/CCA.6$cor^2 - SVD.A$d^2
problem6.Y <- problem6.X %*% t(A) + 3*matrix(rnorm(1000*5),nrow = 1000)
SVD.A$d^2/CCA.6$cor^2 - SVD.A$d^2
CCA.6 <- cc(problem6.X,problem6.Y)
SVD.A$d^2/CCA.6$cor^2 - SVD.A$d^2
problem6.Y <- problem6.X %*% t(A) + 2*matrix(rnorm(1000*5),nrow = 1000)
CCA.6 <- cc(problem6.X,problem6.Y)
SVD.A$d^2/CCA.6$cor^2 - SVD.A$d^2
mean(SVD.A$d^2/CCA.6$cor^2 - SVD.A$d^2)
problem6.Y <- problem6.X %*% t(A) + 5*matrix(rnorm(1000*5),nrow = 1000)
CCA.6 <- cc(problem6.X,problem6.Y)
mean(SVD.A$d^2/CCA.6$cor^2 - SVD.A$d^2)
problem6.Y <- problem6.X %*% t(A) + matrix(rnorm(1000*5),nrow = 1000)
CCA.6 <- cc(problem6.X,problem6.Y)
mean(SVD.A$d^2/CCA.6$cor^2 - SVD.A$d^2)
rm(SVD.A,CCA.6)
getwd()
save.image("~/Documents/Teaching/Dimension Reduction - Fall 2019/Homework/Homework 3/pset3.Rdata")
rm(ls = list())
rm(ls = list())
list()
ls()
rm(ls())
rm(list = ls())
x <- rnorm(100)
y <- cbind(x, x^2)
y <- cbind(x, x^2) + 0.1*rnorm(100*2,nrow=2)
y <- cbind(x, x^2) + 0.1*matrix(rnorm(100*2),nrow=2)
y <- cbind(x, x^2) + 0.1*matrix(rnorm(100*2),nrow=100)
test <- cc(x,y)
x <- matrix(rnorm(100*2),nrow = 2)
x <- matrix(rnorm(100*2),nrow = 2); y <- cbind(x[,1],x[,1]^2) + matrix(rnorm(100*2,mu = 0, sigma = 0.1), nrow=100)
x <- matrix(rnorm(100*2),nrow = 2); y <- cbind(x[,1],x[,1]^2) + matrix(rnorm(100*2,mu = 0, sig = 0.1), nrow=100)
x <- matrix(rnorm(100*2),nrow = 2); y <- cbind(x[,1],x[,1]^2) + matrix(rnorm(100*2,mu = 0, sd = 0.1), nrow=100)
x <- matrix(rnorm(100*2),nrow = 2); y <- cbind(x[,1],x[,1]^2) + matrix(rnorm(100*2,mean = 0, sd = 0.1), nrow=100)
x <- matrix(rnorm(100*2),nrow = 100); y <- cbind(x[,1],x[,1]^2) + matrix(rnorm(100*2,mean = 0, sd = 0.1), nrow=100)
test <- cc(x,y)
test$xcoef %*% t(test$xcoef)
var(y)
N <- 1e3; x <- matrix(rnorm(N*2),nrow = N); y <- cbind(x[,1],x[,1]^2) + matrix(rnorm(N*2,mean = 0, sd = 0.1), nrow=N)
var(y)
N <- 1e4; x <- matrix(rnorm(N*2),nrow = N); y <- cbind(x[,1],x[,1]^2) + matrix(rnorm(N*2,mean = 0, sd = 0.1), nrow=N)
var(y)
N <- 1e4; x <- matrix(rnorm(N*2),nrow = N); y <- cbind(x[,1],x[,1]^2) + matrix(rnorm(N*2,mean = 0, sd = 1), nrow=N)
var(y)
N <- 1e5; x <- matrix(rnorm(N*2),nrow = N); y <- cbind(x[,1],x[,1]^2) + matrix(rnorm(N*2,mean = 0, sd = 1), nrow=N)
var(y)
N <- 1e5; x <- matrix(rnorm(N*2),nrow = N); y <- cbind(x[,1],x[,1]^2) + matrix(rnorm(N*2,mean = 0, sd = 2), nrow=N)
var(y)
var(x,y)
x <- x[,1]
var(x,y)
setwd("~/Documents/Teaching/")
setwd("Dimension Reduction - Fall 2019/Datasets/")
load(file = "digits.Rdata")
library("NMF")
test <- nmf(digits$pixels[1:100,], rank = 10)
test <- nmf(t(digits$pixels[1:100,]), rank = 10)
dig <- t(digits[1:100,])
dig <- t(digits$pixels[1:100,])
which(rowSums(dig)=0)
which(rowSums(dig)==0)
which(colSums(dig)==0)
length(colSums(dig))
which(colSums(dig) = 0)
colSums(dig)
which(rowSums(dig) == 0)
zerow <- which(rowSums(dig) == 0)
test <- nmf(dig[-zerow,], rank = 10)
dig <- t(digits[1:1000,])
dig <- t(digits$pixels[1:1000,])
zerow <- which(rowSums(dig) == 0)
test <- nmf(dig[-zerow,], rank = 10)
i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,1]
image(matrix(i1,nrow = 784))
image(matrix(i1,nrow = 28))
i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,1]; image(matrix(i1,nrow = 28))
i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,2]; image(matrix(i1,nrow = 28))
i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,3]; image(matrix(i1,nrow = 28))
i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,4]; image(matrix(i1,nrow = 28))
i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,5]; image(matrix(i1,nrow = 28))
i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,6]; image(matrix(i1,nrow = 28))
View(test@fit@H)
i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,7]; image(matrix(i1,nrow = 28))
i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,8]; image(matrix(i1,nrow = 28))
i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,9]; image(matrix(i1,nrow = 28))
i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,10]; image(matrix(i1,nrow = 28))
test <- nmf(dig[-zerow,], rank = 3)
i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,10]; image(matrix(i1,nrow = 28))
i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,3]; image(matrix(i1,nrow = 28))
i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,1]; image(matrix(i1,nrow = 28))
i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,2]; image(matrix(i1,nrow = 28))
test <- nmf(dig[-zerow,], rank = 10, "KL")
i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,2]; image(matrix(i1,nrow = 28))
j <- 1; i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,j]; image(matrix(i1,nrow = 28))
j <- 2; i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,j]; image(matrix(i1,nrow = 28))
j <- 3; i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,j]; image(matrix(i1,nrow = 28))
j <- 4; i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,j]; image(matrix(i1,nrow = 28))
j <- 5; i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,j]; image(matrix(i1,nrow = 28))
j <- 3; i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,j]; image(matrix(t(i1),nrow = 28))
j <- 5; i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,j]; image(matrix(t(i1),nrow = 28))
j <- 6; i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,j]; image(matrix(t(i1),nrow = 28))
j <- 7; i1 <- rep(1,784); i1[-zerow] <- test@fit@W[,j]; image(matrix(t(i1),nrow = 28))
i2 <- rep(0,784); i2[-zero2] <- (test@fit@W %*% test@fit@H[,1]); image(matrix(i2, nrow = 28))
i2 <- rep(0,784); i2[-zerow] <- (test@fit@W %*% test@fit@H[,1]); image(matrix(i2, nrow = 28))
image(matrix(dig[1,],nrow = 28)
)
dim(dig)
image(matrix(dig[,1],nrow = 28))
i2 <- rep(0,784); i2[-zerow] <- (test@fit@W %*% test@fit@H[,1]); image(matrix(i2, nrow = 28))
test <- nmf(t(dig[-zerow,]), rank = 10, "KL")
rm(list = ls())
test <- data("esGolub")
install.packages("Biobase")
test <- data(golub)
library(multtest)
install.packages("multtest")
install.packages("golubEsets")
rm(test)
dev.off()
setwd("~/Documents/Teaching/Dimension Reduction - Fall 2019/Homework/Homework 3/")
p <- 0.75; Sig = matrix(c(1,p,p,1),nrow=2)
Sig
p <- 0.75; Sig = matrix(c(1,p,p,1),nrow=2); Sigxy = matrix(p,nrow=2,ncol=2);
Sig^{-1/2}
SVD.Sig
SVD.Sig <- svd(Sig)
svd(matrix(1,ncol = 2, nrow = 2))
source('~/.active-rstudio-document', echo=TRUE)
test
svd(test)
2*p/(1+p)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
test$d[1] - 2*abs(p)/(1-p)
svd(p*matrix(1,nrow=2,ncol = 2))$d
svd(p*matrix(1,nrow=2,ncol = 2))$u
test <- svd(p*matrix(1,nrow=2,ncol = 2))
-test %*%u %*% diag(test$d) %*% (-t(test$v))
-test$u %*% %*% diag(test$d) %*% (-t(test$v))
-test$u %*% diag(test$d) %*% (-t(test$v))
-test$u %*% diag(test$d) %*% (t(test$v))
test$v
test$d[1] - 2*abs(p)/(1+p)
test <- svd(p*matrix(1,nrow=2,ncol = 2))
test$d[1] - 2*abs(p)/(1+p)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
CCA.6 <- cc(problem6.X,problem6.Y)
set.seed(1) # for reproducibility of results
require("MASS")
require("CCA")
load("pset3.Rdata")
CCA.6 <- cc(problem6.X,problem6.Y)
SVD.A <- svd(A)
rho2 <- mean(SVD.A$d^2/CCA.6$cor^2-SVD.A$d^2)
source('~/.active-rstudio-document', echo=TRUE)
test <- eigen(matrix(1,nrow =2 ,ncol = 2))
test$vectors
source('~/.active-rstudio-document', echo=TRUE)
View(test)
A
rm(list = ls())
A <- matrix(1/sqrt(2),nrow = 2 , ncol =2 )
A[2,2] < - A[2,2]
A[2,2] < -A[2,2]
A[2,2] <- -A[2,2]
p = 1;
A %*% diag(c(2*abs(p),0)) %*% t(A)
p = 0.5;
p = 0.5; A %*% diag(c(2*abs(p),0)) %*% t(A)
p = -0.5; A %*% diag(c(2*abs(p),0)) %*% t(A)
source('~/.active-rstudio-document', echo=TRUE)
test$u
test$v
rm(list = ls())
nmf.185 <- function(X, rank, method = "frob"){
if (method == "frob"){
temp <- nmf(t(X), rank = rank, method = "lee")}
else if (method = "KL"){
temp <- nmf(t(X), rank = rank, method = "brunet")
}
else {"Incorrect objective functions specified"}
out <- list()
out$W <- temp@fit@W
out$H <- temp @fit@H
}
nmf.185 <- function(X, rank, method = "frob"){
if (method == "frob"){
temp <- nmf(t(X), rank = rank, method = "lee")}
else if (method = "KL"){
temp <- nmf(t(X), rank = rank, method = "brunet")
}
# out <- list()
# out$W <- temp@fit@W
# out$H <- temp @fit@H
}
nmf.185 <- function(X, rank, method = "frob"){
if (method == "frob"){
temp <- nmf(t(X), rank = rank, method = "lee")
} else if (method = "KL"){
temp <- nmf(t(X), rank = rank, method = "brunet")
} else if (rank > min(dim(X)){
warning("Chosen rank too high: specify rank less than minimum dimensions of input matrix")
} else{
warning("Incorrect method specified")
}
# out <- list()
# out$W <- temp@fit@W
# out$H <- temp @fit@H
}
nmf.185 <- function(X, rank, method = "frob"){
if (method == "frob"){
temp <- nmf(t(X), rank = rank, method = "lee")
}
# out <- list()
# out$W <- temp@fit@W
# out$H <- temp @fit@H
}
nmf.185 <- function(X, rank, method = "frob"){
if (method == "frob"){
temp <- nmf(t(X), rank = rank, method = "lee")
} else if (method = "KL"){
temp <- nmf(t(X), rank = rank, method = "brunet")
}
# out <- list()
# out$W <- temp@fit@W
# out$H <- temp @fit@H
}
nmf.185 <- function(X, rank, method = "frob"){
if (method == "frob"){
temp <- nmf(t(X), rank = rank, method = "lee")
}
elseif (method = "KL"){
temp <- nmf(t(X), rank = rank, method = "brunet")
}
# out <- list()
# out$W <- temp@fit@W
# out$H <- temp @fit@H
}
nmf.185 <- function(X, rank, method = "frob"){
if (method == "frob"){
temp <- nmf(t(X), rank = rank, method = "lee")
}
else if (method = "KL"){
temp <- nmf(t(X), rank = rank, method = "brunet")
}
# out <- list()
# out$W <- temp@fit@W
# out$H <- temp @fit@H
}
nmf.185 <- function(X, rank, method = "frob"){
if (method == "frob"){
temp <- nmf(t(X), rank = rank, method = "lee")
} else if (method = "KL"){
temp <- nmf(t(X), rank = rank, method = "brunet")
}
# out <- list()
# out$W <- temp@fit@W
# out$H <- temp @fit@H
}
nmf.185 <- function(X, rank, method = "frob"){
if (method == "frob"){
temp <- nmf(t(X), rank = rank, method = "lee")
} else if (method = "KL") {
temp <- nmf(t(X), rank = rank, method = "brunet")
}
# out <- list()
# out$W <- temp@fit@W
# out$H <- temp @fit@H
}
X < matrix(1,nrow = 2, ncol = 2)
X <- matrix(1,nrow = 2, ncol = 2)
rank =1
nmf.185 <- function(X, rank, method = "frob"){
if (method == "frob"){
temp <- nmf(t(X), rank = rank, method = "lee")
} else if (method = "KL") {
temp <- nmf(t(X), rank = rank, method = "brunet")
}
# out <- list()
# out$W <- temp@fit@W
# out$H <- temp @fit@H
}
function(X, rank, method = "frob"){
if (method == "frob"){
temp <- nmf(t(X), rank = rank, method = "lee")
} else if (method = "KL") {
temp <- nmf(t(X), rank = rank, method = "brunet")
}
# out <- list()
# out$W <- temp@fit@W
# out$H <- temp @fit@H
}
nmf.185 <- function(X, rank, method = "frob"){
if (method == "frob"){
temp <- nmf(t(X), rank = rank, method = "lee")
} else if (method = "KL") {
temp <- nmf(t(X), rank = rank, method = "brunet")
}
# out <- list()
# out$W <- temp@fit@W
# out$H <- temp @fit@H
return(out)
}
function(X, rank, method = "frob"){
if (method == "frob"){
temp <- nmf(t(X), rank = rank, method = "lee")
} else if (method = "KL") {
temp <- nmf(t(X), rank = rank, method = "brunet")
}
# out <- list()
# out$W <- temp@fit@W
# out$H <- temp @fit@H
return(out)
}
rm(nmf.185)
nmf.185 <- function(X, rank, method = "frob"){
if (method == "frob"){
temp <- nmf(t(X), rank = rank, method = "lee")
} else if (method = "KL") {
temp <- nmf(t(X), rank = rank, method = "brunet")
}
return(out)
}
nmf.185 <- function(X, rank, method = "frob"){
if (method == "frob"){
temp <- nmf(t(X), rank = rank, method = "lee")
else if (method = "KL") {
temp <- nmf(t(X), rank = rank, method = "brunet")
}
return(out)
}
nmf185 <- function(X, rank, method = "frob"){
if (rank > min(dim(X))){
warning("Please specify rank <= min of dim(X)")
} else if (method = "frob") {
temp <- nmf(X,rank = rank, method = "lee")
} else if (method = "KL") {
temp <- nmf(X, rank = rank, method = "brunet")
}
return(out)
}
test <- nmf(X, rank = 1)
test <- nmf(X, rank = 1)
test <- nmf(X, rank = 1)
test <- nmf(X, rank = 1)
test <- nmf(X, rank = 1)
test <- nmf(X, rank = 1)
test <- nmf(X, rank = 1, method = "lee")
test <- nmf(X, rank = 1, method = "lee")
test <- nmf(X, rank = 1, method = "lee")
test <- nmf(X, rank = 1, method = "lee")
test <- nmf(X, rank = 1, method = "lee")
X <- matrix(1, nro = 5, ncol = 2)
test <- nmf(X, rank = 1, method = "lee")
fit(test)
nmf185 <- function(X, rank, method = "frob"){
if (rank > min(dim(X))){
warning("Please specify rank <= min of dim(X)")
} else if (method = "frob") {
temp <- nmf(t(X),rank = rank, method = "lee")
} else if (method = "KL") {
temp <- nmf(t(X), rank = rank, method = "brunet")
}
out <- list()
return(out)
}
nmf185 <- function(X, rank, method = "frob"){
if (rank > min(dim(X))){
warning("Please specify rank <= min of dim(X)")
} else if (method == "frob") {
temp <- nmf(t(X),rank = rank, method = "lee")
} else if (method == "KL") {
temp <- nmf(t(X), rank = rank, method = "brunet")
}
out <- list()
return(out)
}
summary(temp)
test@misc
test@fit
test@fit@misc
test@fit@bterms
test@fit@ibterms
test@fit@cterms
test@fit@W
test@parameters
test
fit(temp)$samples
fit(temp)
test <- fit(temp)
fitted(temp)
