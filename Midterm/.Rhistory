require("CCA")
load("pset3.Rdata")
CCA.9 <- cc(problem9.X,problem9.Y)
CCA.9$cor
par(mfrow=c(2,3))
for (j in 1:6){
plot(CCA.9$scores$xscores[,j],CCA.9$scores$yscores[,j],
xlab = bquote(paste('x',[.(j)])),
bquote(paste('x',[.(j)]))
par(mfrow=c(2,3))
for (j in 1:6){
plot(CCA.9$scores$xscores[,j],CCA.9$scores$yscores[,j],
xlab = bquote(paste('x'[.(j)])),
ylab = bquote(paste('y'[.(j)])),
)
}
Seta <- var(CCA.9$scores$xscores)
Sxi  <- var(CCA.9$scores$yscores)
print(Seta)
print(Sxi)
Seta <- round(var(CCA.9$scores$xscores),2)
Sxi  <- round(var(CCA.9$scores$yscores),2)
Seta <- round(var(CCA.9$scores$xscores),2)
Sxi  <- round(var(CCA.9$scores$yscores),2)
Sxi  <- round(var(CCA.9$scores$yscores),2)
print(Sxi)
Seta <- round(var(CCA.9$scores$xscores),2)
print(Seta)
Setaxi <- round(var(CCA.9$scores$xscores,CCA.9$scores$yscores),2)
print(Setaxi)
set.seed(1) # for reproducibility of results
require("MASS")
require("CCA")
load("pset3.Rdata")
problem5.X <- matrix(rnorm(1000*10),nrow = 1000)
problem5.Y <- A %*% problem5.X
problem5.X <- matrix(rnorm(1000*10),nrow = 1000)
problem5.Y <- problem5.X %*% t(A)
CCA.5 <- cc(problem5.X,problem5.Y)
print(CCA.5$cor)
test <- svd(matrix(0.5,nrow = 2, ncol = 2))
test$u
test$v
u <- sqrt(2)/2*matrix(1,nrow = 2, ncol = 2); u[2,2] <- -u[2,2]
u %*% diag(c(1,0)) %*% t(u)
CCA.6 <- cc(problem6.X,problem6.Y)
SVD.A <- svd(A)
rho2 <- mean(SVD.A$d/CCA.6^2)
CCA.6 <- cc(problem6.X,problem6.Y)
SVD.A <- svd(A)
rho2 <- mean(SVD.A$d/CCA.6$cor^2)
CCA.6 <- cc(problem6.X,problem6.Y)
SVD.A <- svd(A)
rho2 <- mean(SVD.A$d^2/CCA.6$cor^2-SVD.A$d^2)
SVD.A$d^2/CCA.6$cor^2
SVD.A$d^2
CCA.6$cor^2
set.seed(1) # for reproducibility of results
require("MASS")
require("CCA")
load("pset3.Rdata")
sum(abs(problem6.Y - problem6.X %*% t(A)))
test <- svd(matrix(0.5,nrow = 2, ncol = 2))
test <- svd(matrix(1,nrow = 2, ncol = 2))
for (j in 1:10){problem7[j,] <- problem7[j,]/norm(problem7[j,])}
source('~/.active-rstudio-document', echo=TRUE)
norm(problem7[1,])
source('~/.active-rstudio-document', echo=TRUE)
library(scatterplot3d)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library("geometry")
install.packages("geometry")
library("geometry")
hull <- convhulln(problem7)
surf.tri(hull)
ps <- convhulln(problem7)
rgl.triangles(ps[ts.surf,1],ps[ts.surf,2],ps[ts.surf,3],col="blue",alpha=.2)
library("rgl")
rgl.triangles(ps[ts.surf,1],ps[ts.surf,2],ps[ts.surf,3],col="blue",alpha=.2)
ts.surf <- t(convhulln(ps))
rgl.triangles(ps[ts.surf,1],ps[ts.surf,2],ps[ts.surf,3],col="blue",alpha=.2)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
distmesh(p,test)
distmeshnd(p,test)
rm(list = ls())
require("archetypes")
require("NMF")
require("grDevices")
load('pset4.Rdata')
digits8 <- digits$pixels[digits$labels==8,][1:200,]
zerocol <- which(colSums(digits8)==0)
digits8 <- digits8[,-zerocol]
# calculate the NMFs
NonMF <- nmf(digits8, 1:5, nrun = 5, method = "Frobenius", .options='t')
# generate the scree plot
plot()
# generate the scree plot
plot(NonMF$measures$rss)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
require("NMF")
require("archetypes")
load("~/Documents/Teaching/Dimension Reduction - Fall 2019/Datasets/digits.Rdata")
N <- 200
digits7 <- digits$pixels[digits$labels == 7,][1:N,]
par(mfrow = c(1,1))
for (j in 1:25){
image(matrix(digits7[j,],nrow = 28),
xat = '')
}
N <- 200
digits7 <- digits$pixels[digits$labels == 7,][1:N,]
par(mfrow = c(1,1))
for (j in 1:25){
image(matrix(digits7[j,],nrow = 28),
xaxt = 'n', yaxt = 'n')
}
N <- 200
digits7 <- digits$pixels[digits$labels == 7,][1:N,]
par(mfrow = c(5,5))
for (j in 1:25){
image(matrix(digits7[j,],nrow = 28),
xaxt = 'n', yaxt = 'n')
}
par("mar")
N <- 200
digits7 <- digits$pixels[digits$labels == 7,][1:N,]
par(mar=c(1,1,1,1))
par(mfrow = c(5,5))
for (j in 1:25){
image(matrix(digits7[j,],nrow = 28),
xaxt = 'n', yaxt = 'n')
}
knitr::opts_chunk$set(echo = TRUE)
require("NMF")
require("archetypes")
load("~/Documents/Teaching/Dimension Reduction - Fall 2019/Datasets/digits.Rdata")
knitr::opts_chunk$set(echo = TRUE)
require("NMF")
require("archetypes")
load("~/Documents/Teaching/Dimension Reduction - Fall 2019/Datasets/digits.Rdata")
out.pca <- princomp(digits4)
N <- 200
digits4 <- digits$pixels[digits$labels == 4,][1:N,]
par(mar=c(1,1,1,1))
par(mfrow = c(5,5))
for (j in 1:25){
image(matrix(digits4[j,],nrow = 28),
xaxt = 'n', yaxt = 'n')
}
out.pca <- princomp(digits4)
N <- 800
out.pca <- princomp(digits$pixels[digits$labels == 4,][1:N,])
N <- 800
out.pca <- princomp(digits$pixels[digits$labels == 4,][1:N,])
par(mar=c(1,1,1,1))
par(mfrow = c(1,3))
image(matrix(out.pca$center, nrow = 28),
xaxt = 'n', yaxt = 'n')
for (j in 1:3){
image(matrix(out.pca$loadings[j,], nrow = 28),
xaxt = 'n', yaxt = 'n')
}
N <- 800
out.pca <- princomp(digits$pixels[digits$labels == 4,][1:N,])
par(mar=c(1,1,1,1))
par(mfrow = c(1,3))
image(matrix(out.pca$center, nrow = 28),
xaxt = 'n', yaxt = 'n')
for (j in 1:2){
image(matrix(out.pca$loadings[j,], nrow = 28),
xaxt = 'n', yaxt = 'n')
}
N <- 800
out.pca <- princomp(digits$pixels[digits$labels == 4,][1:N,])
par(mar=c(1,1,1,1))
par(mfrow = c(1,3))
image(matrix(out.pca$center, nrow = 28),
xaxt = 'n', yaxt = 'n')
for (j in 1:2){
image(matrix(out.pca$loadings[,j], nrow = 28),
xaxt = 'n', yaxt = 'n')
}
out <- nmf(digits4, rank = 1:10, nrun = 5, method = "Frobenius")
out$measures$residuals/out$measures$rss
plot(out$measures$residuals,
xlab = "Rank",
ylab = "Residual")
out <- nmf(digits4, rank = 1:50, nrun = 5, method = "Frobenius")
out <- nmf(digits4, rank = 1:5, nrun = 5, method = "Frobenius")
#takes ~ 10 minutes to run
plot(out$measures$residuals,
xlab = "Rank",
ylab = "Residual")
H <- out$fit$`5`@fit@H
for (j in 1:25){
image(matrix(H[j,],nrow = 28,
xaxt = 'n', yaxt = 'n'))
}
H <- out$fit$`5`@fit@H
par(mar=c(1,1,1,1))
par(mfrow = c(5,5))
for (j in 1:25){
image(matrix(H[j,],nrow = 28),
xaxt = 'n', yaxt = 'n'))
H <- out$fit$`5`@fit@H
par(mar=c(1,1,1,1))
par(mfrow = c(5,5))
for (j in 1:25){
image(matrix(H[j,],nrow = 28),
xaxt = 'n', yaxt = 'n')
}
H <- out$fit$`5`@fit@H
par(mar=c(1,1,1,1))
par(mfrow = c(5,5))
for (j in 1:5){
image(matrix(H[j,],nrow = 28),
xaxt = 'n', yaxt = 'n')
}
out <- archetypes(digits4, rank = 3, nrep = 1,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn)
)
out <- archetypes(digits4, k = 3, nrep = 1,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn)
)
out <- archetypes(digits4, k = 3,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn)
)
out <- nmf(digits4, rank = 1:25, nrun = 5, method = "Frobenius")
out <- nmf(digits4, rank = 1:10, nrun = 5, method = "Frobenius")
#takes ~ 10 minutes to run
plot(out$measures$residuals,
xlab = "Rank",
ylab = "Residual")
H <- out$fit$`25`@fit@H
H <- out$fit$`10`@fit@H
par(mar=c(1,1,1,1))
par(mfrow = c(5,2))
for (j in 1:10){
image(matrix(H[j,],nrow = 28),
xaxt = 'n', yaxt = 'n')
}
H <- out$fit$`5`@fit@H
par(mar=c(1,1,1,1))
par(mfrow = c(5,2))
for (j in 1:10){
image(matrix(H[j,],nrow = 28),
xaxt = 'n', yaxt = 'n')
}
H <- out$fit$`5`@fit@H
par(mar=c(1,1,1,1))
par(mfrow = c(5,2))
for (j in 1:5){
image(matrix(H[j,],nrow = 28),
xaxt = 'n', yaxt = 'n')
}
par(mar=c(1,1,1,1))
par(mfrow = c(5,5))
image(matrix(out.pca$center,nrow = 28),
xaxt = 'n', yaxt = 'n')
for (j in 1:24){
image(matrix(out.pca$loadings[,j],nrow = 28),
xaxt = 'n', yaxt = 'n')
}
par(mar=c(1,1,1,1))
par(mfrow = c(2,5))
image(matrix(out.pca$center,nrow = 28),
xaxt = 'n', yaxt = 'n')
for (j in 1:9){
image(matrix(out.pca$loadings[,j],nrow = 28),
xaxt = 'n', yaxt = 'n')
}
zerocol <- which(colSums(digits4) == 0);
zerocol <- which(colSums(digits4) == 0);
out <- archetypes(digits4[-zerocol,], k = 3,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn)
)
out <- archetypes(digits4[,-zerocol], k = 3,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn)
)
par(mar=c(1,1,1,1))
par(mfrow = c(1,3))
for (j in 1:3){
temp <- rep(0,784); temp[-zerocol] <- out$archetypes[j,]
image(matrix(temp, nrow = 28),
xaxt = 'n', yaxt = 'n')
}
out <- nmf(digits4, rank = 1:10, nrun = 5, method = "Frobenius")
H <- out$fit$`10`@fit@H
out <- archetypes(digits4[,-zerocol], rank = 1:10, nrep = 1,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn),
verbose = FALSE
)
out <- archetypes(digits4[,-zerocol], k = 1:10, nrep = 1,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn),
verbose = FALSE
)
out <- stepArchetypes(digits4[,-zerocol], k = 1:10, nrep = 1,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn),
verbose = FALSE
)
#takes ~ 10 minutes to run
# the family addition specifies a more robust algorithm.
H <- bestModel(out[[j]])
H <- bestModel(out[[10]])$archetypes
par(mar=c(1,1,1,1))
par(mfrow = c(5,2))
for (j in 1:10){
image(matrix(H[j,],nrow = 28),
xaxt = 'n', yaxt = 'n')
}
H <- bestModel(out[[10]])$archetypes
par(mar=c(1,1,1,1))
par(mfrow = c(5,2))
for (j in 1:10){
temp <- rep(0,784); temp[-zerocol] <- H[j,]
image(matrix(temp,nrow = 28),
xaxt = 'n', yaxt = 'n')
}
knitr::opts_chunk$set(echo = TRUE)
require("NMF")
require("archetypes")
load("~/Documents/Teaching/Dimension Reduction - Fall 2019/Datasets/digits.Rdata")
out <- stepArchetypes(digits4[,-zerocol], k = 1:10, nrep = 5,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn),
verbose = FALSE
)
N <- 200
digits4 <- digits$pixels[digits$labels == 4,][1:N,]
par(mar=c(1,1,1,1))
par(mfrow = c(5,5))
for (j in 1:25){
image(matrix(digits4[j,],nrow = 28),
xaxt = 'n', yaxt = 'n')
}
out <- stepArchetypes(digits4[,-zerocol], k = 1:10, nrep = 5,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn),
verbose = FALSE
)
zerocol <- which(colSums(digits4) == 0);
out <- stepArchetypes(digits4[,-zerocol], k = 1:10, nrep = 5,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn),
verbose = FALSE
)
#takes ~ 10 minutes to run
# the family addition specifies a more robust algorithm.
test <- bestModel(out)
test$rss
summary(test)
test[1]
test[1]$rss
test[[1]]
test <- bestModel(out)[[1]]
test <- bestModel(out)[[1]]$rss
test <- bestModel(out)[[]]$rss
test <- rep(0,10); for (j in 1:10){test[j] <- bestModel(out)[[j]]$rss}
plot(test)
RSS <- rep(0,10); for (j in 1:10){RSS[j] <- bestModel(out)[[j]]$rss}
plot(RSS,
xlab = "Number of Archetypes",
ylab = "Residual")
plot(RSS,
xlab = "Number of Archetypes",
ylab = "Residual")
test <- bestModel(out)[[2]]
p = 0.25;
SigX <- matrix(c(1,p,p,1),nrow = 2)
SigX
SVD.SigX <- svd(SigX)
source('~/.active-rstudio-document', echo=TRUE)
svd(SVD.SigX$u %*% diag(SVD.SigX^{-1/2}) %*% t(SVD.SigX$u) %*% SigXY %*% SVD.SigX$u %*% diag(SVD.SigX^{-1/2}) %*% t(SVD.SigX$u) )$d
source('~/.active-rstudio-document', echo=TRUE)
SVD.SigX$u %*% diag(SVD.SigX^{-1/2}) %*% t(SVD.SigX$u)
source('~/.active-rstudio-document', echo=TRUE)
out$d[1] - 2*abs(p)/(1+p)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
require("archetypes")
require("NMF")
require("grDevices")
load('pset4.Rdata')
problem3.Frob <- nmf(problem3, 1, nrun = 25, method = "Frobenius")
problem3.KL <- nmf(problem3, 1, nrun = 25, method = "KL")
X <- matrix(runif(6,min = 0, max = 10), nrow = 3)
X
test <- nmf(X, 1, method = "KL")
test@fit@W
test@fit@H
rowSums(X)
test@fit@W/colSums(X)*sum(X)
test@fit@W/colSums(X)
test@fit@W/rowSums(X)
test@fit@W/rowSums(X)*sum(X)
test@fit@H/colSums(X)*sum(X)
test@fit@H
test@fit@W
sum(test@fit@H)
sum(test@fit@W)
X <- X/sum(X)
test <- nmf(X, 1, method = "KL")
sum(test@fit@H)
sum(test@fit@W)
sum(test@fit@W)/sum(test@fit@H)
sum(test@fit@W)*sum(test@fit@H)
X <- matrix(runif(6,min = 0, max = 10), nrow = 3)
X
test <- mmf(X,1)
test <- nmf(X,1)
teste
test
test@fit@w/(colSums(X)/sum(X))
test@fit@W/(colSums(X)/sum(X))
test@fit@W/(rowlSums(X)/sum(X))
test@fit@W/(rowSums(X)/sum(X))
test@fit@H/(colSums(X)/sum(X))
1.315774*19.90078
sum(X)
problem3.Frob@residuals
problem3.KL@residuals
problem3.Frob@residuals < problem3.KL@residuals
# generate the scree plot
plot(NonMF$measures$rss,
xlab = "Rank",
ylab = "Residuals")
test <- nmf(X,1)
test@fit@W
sum(test@fit@W)*sum(test@fit@H)
sum(X)
digits8 <- digits$pixels[digits$labels==8,][1:200,]
zerocol <- which(colSums(digits8)==0)
digits8 <- digits8[,-zerocol]
# calculate the NMFs
NonMF <- nmf(digits8, 1:5, nrun = 5, method = "Frobenius", .options='t')
# generate the scree plot
plot(NonMF$measures$rss,
xlab = "Rank",
ylab = "Residuals")
# example <- rep(0,784); example[-zerocol] <- temp <- NonMF$fit$`5`@fit@H[3,]
# image(matrix(example, nrow = 28))
par(mfrow = c(5,5))
for (j in 1:25){
example <- rep(0,784); example[-zerocol] <- NonMF$fit$`25`@fit@H[j,]
image(matrix(example, nrow = 28),
xaxt = 'n', yaxt = 'n')
}
# calculate the NMFs
NonMF <- nmf(digits8, 1:25, nrun = 5, method = "Frobenius", .options='t')
# generate the scree plot
plot(NonMF$measures$rss,
xlab = "Rank",
ylab = "Residuals")
# example <- rep(0,784); example[-zerocol] <- temp <- NonMF$fit$`5`@fit@H[3,]
# image(matrix(example, nrow = 28))
par(mfrow = c(5,5))
for (j in 1:25){
example <- rep(0,784); example[-zerocol] <- NonMF$fit$`25`@fit@H[j,]
image(matrix(example, nrow = 28),
xaxt = 'n', yaxt = 'n')
}
# example <- rep(0,784); example[-zerocol] <- temp <- NonMF$fit$`5`@fit@H[3,]
# image(matrix(example, nrow = 28))
par(c(1,1,1,1))
par(mfrow = c(5,5))
for (j in 1:25){
example <- rep(0,784); example[-zerocol] <- NonMF$fit$`25`@fit@H[j,]
image(matrix(example, nrow = 28),
xaxt = 'n', yaxt = 'n')
}
# example <- rep(0,784); example[-zerocol] <- temp <- NonMF$fit$`5`@fit@H[3,]
# image(matrix(example, nrow = 28))
par(mar= c(1,1,1,1))
par(mfrow = c(5,5))
for (j in 1:25){
example <- rep(0,784); example[-zerocol] <- NonMF$fit$`25`@fit@H[j,]
image(matrix(example, nrow = 28),
xaxt = 'n', yaxt = 'n')
}
Arch <- stepArchetypes(digits8[,-zerocol], k = 1:25, nrep = 10,
family = archetypesFamily("original",
zalphasfn =archetypes:::ginv.zalphasfn),
verbose = FALSE
)
bestModel(Arch)[[j]]$rss
setwd("~/Documents/Teaching/Dimension Reduction - Fall 2019/Mid")
setwd("~/Documents/Teaching/Dimension Reduction - Fall 2019/Midterm/")
load("midterm.Rdata")
princomp(problem1)
princomp(problem2)
test <- mean(problem2)
test <- rowSums(problem2)/150
test <- colSums(problem2)/50
save.image("midterm.Rdata")
rm(list = ls())
load("midterm.Rdata")
