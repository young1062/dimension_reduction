A.rings <- exp(- sig * as.matrix(dist(rings)^2) ); diag(A.rings) <- 0
# delete non-nearest neighbors
# k <- 3
# for (j in 1:dim(A.rings)[1]){
#   A.rings[j, which(A.rings[j,] > sort(A.rings[j,])[k])] <- 0
# }
Deg <- as.vector(A.rings %*% matrix(1,nrow = dim(rings)[1], ncol = 1))
# unnormalized graph Laplacian
# L.rings <- diag( Deg ) - A.rings
# normalized graph Laplacian
L.rings <- diag(rep(1,dim(rings)[1] )) - diag(D eg^{-1/2}) %*% A.rings %*% diag(Deg^{-1/2})
# sig <- 1/(2*rings.spec@kernelf@kpar$sigma^2)
sig <- rings.spec@kernelf@kpar$sigma
# sig <- 40.5
A.rings <- exp(- sig * as.matrix(dist(rings)^2) ); diag(A.rings) <- 0
# delete non-nearest neighbors
# k <- 3
# for (j in 1:dim(A.rings)[1]){
#   A.rings[j, which(A.rings[j,] > sort(A.rings[j,])[k])] <- 0
# }
Deg <- as.vector(A.rings %*% matrix(1,nrow = dim(rings)[1], ncol = 1))
# unnormalized graph Laplacian
# L.rings <- diag( Deg ) - A.rings
# normalized graph Laplacian
L.rings <- diag(rep(1,dim(rings)[1] )) - diag(Deg^{-1/2}) %*% A.rings %*% diag(Deg^{-1/2})
par(mfrow = c(1,2))
im <- image(x = seq(1,dim(rings)[1],1), y = seq(1,dim(rings)[1],1), z = A.rings[,dim(rings)[1]:1],
xlab = '', ylab = '', main = "Affinity Matrix"
)
im <- image(x = seq(1,dim(rings)[1],1), y = seq(1,dim(rings)[1],1), z = L.rings[,dim(rings)[1]:1],
xlab = '', ylab = '', main = "Graph Laplacian"
)
sum(abs(A.ring - kernelMatrix(rbfdot(sigma =rings.spec@kernelf@kpar$sigma), rings)))
sum(abs(A.rings - kernelMatrix(rbfdot(sigma =rings.spec@kernelf@kpar$sigma), rings)))
sum(abs(L.rings - kernelMatrix(rbfdot(sigma =rings.spec@kernelf@kpar$sigma), rings)))
sum(abs(diag(Deg^{-1/2}) %*% A.rings %*% diag(Deg^{-1/2}) - kernelMatrix(rbfdot(sigma =rings.spec@kernelf@kpar$sigma), rings)))
sum(abs(L.rings - kernelMatrix(rbfdot(sigma =1/rings.spec@kernelf@kpar$sigma), rings)))
sum(abs(L.rings - kernelMatrix(rbfdot(sigma =1/(2*rings.spec@kernelf@kpar$sigma^2)), rings)))
sum(abs(L.rings - kernelMatrix(rbfdot(sigma =rings.spec@kernelf@kpar$sigma), rings)))
View(kernelMatrix(rbfdot(sigma =rings.spec@kernelf@kpar$sigma), rings))
# sig <- 1/(2*rings.spec@kernelf@kpar$sigma^2)
sig <- rings.spec@kernelf@kpar$sigma
# sig <- 40.5
A.rings <- exp(- sig * as.matrix(dist(rings)^2) ); diag(A.rings) <- 0
# delete non-nearest neighbors
# k <- 3
# for (j in 1:dim(A.rings)[1]){
#   A.rings[j, which(A.rings[j,] > sort(A.rings[j,])[k])] <- 0
# }
Deg <- as.vector(A.rings %*% matrix(1,nrow = dim(rings)[1], ncol = 1))
# unnormalized graph Laplacian
L.rings <- diag( Deg ) - A.rings
# normalized graph Laplacian
L.rings <- diag(rep(1,dim(rings)[1] )) - diag(Deg^{-1/2}) %*% A.rings %*% diag(Deg^{-1/2})
par(mfrow = c(1,2))
im <- image(x = seq(1,dim(rings)[1],1), y = seq(1,dim(rings)[1],1), z = A.rings[,dim(rings)[1]:1],
xlab = '', ylab = '', main = "Affinity Matrix"
)
im <- image(x = seq(1,dim(rings)[1],1), y = seq(1,dim(rings)[1],1), z = L.rings[,dim(rings)[1]:1],
xlab = '', ylab = '', main = "Graph Laplacian"
)
sum(abs(L.rings - kernelMatrix(rbfdot(sigma =rings.spec@kernelf@kpar$sigma), rings)))
# unnormalized graph Laplacian
# L.rings <- diag( Deg ) - A.rings
# normalized graph Laplacian
L.rings <- diag(rep(1,dim(rings)[1] )) - diag(Deg^{-1/2}) %*% A.rings %*% diag(Deg^{-1/2})
sum(abs(L.rings - kernelMatrix(rbfdot(sigma =rings.spec@kernelf@kpar$sigma), rings)))
# unnormalized graph Laplacian
L.rings <- diag( Deg ) - A.rings
sum(abs(L.rings - kernelMatrix(rbfdot(sigma =rings.spec@kernelf@kpar$sigma), rings)))
# normalized graph Laplacian
# L.rings <- diag(rep(1,dim(rings)[1] )) - diag(Deg^{-1/2}) %*% A.rings %*% diag(Deg^{-1/2})
# RW normalized graph Laplacian
L.rings <- diag(rep(1,dim(rings)[1] )) - diag(Deg^{-1}) %*% A.rings
sum(abs(L.rings - kernelMatrix(rbfdot(sigma =rings.spec@kernelf@kpar$sigma), rings)))
sum(abs(L.rings - kernelMatrix(rbfdot(sigma =rings.spec@kernelf@kpar$sigma), rings)@.Data))
View(kernelMatrix(rbfdot(sigma =rings.spec@kernelf@kpar$sigma), rings)@.Data)
View(kernelMatrix(rbfdot(sigma =rings.spec@kernelf@kpar$sigma), rings)@.Data[1:5,1:5])
View(L.rings[1:5,1:5])
View(A.rings[1:5,1:5])
sum(abs(A.rings - kernelMatrix(rbfdot(sigma =rings.spec@kernelf@kpar$sigma), rings)@.Data))
open("/specc.R")
open("specc.R")
dm <- kernelMatrix(rbfdot(sigma =rings.spec@kernelf@kpar$sigma), rings)
d <- 1/sqrt(rowSums(km))
km <- kernelMatrix(rbfdot(sigma =rings.spec@kernelf@kpar$sigma), rings)
d <- 1/sqrt(rowSums(km))
l <- d * km %*% diag(d)
dim(l)
dim(km)
dim(d*km)
dim(d)
length(d)
d * km %*% diag(d)
View(l[1:5,1:5])
l <-  km %*% diag(d)
View(l[1:5,1:5])
rep(1,5) * matrix(1,5,5)
rep(2,5) * matrix(1,5,5)
seq(1,5,1) * matrix(1,5,5 )
data(cassini)
library(mlbench)
# set.seed(1)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, cache = FALSE, fig.align = 'center')
require(MASS)
require(ggplot2)
require(mclust)
require(cluster)
require(kernlab)
require(scatterplot3d)
require(gtools)
require(mlbench)
myColorRamp <- function(colors, values) {
v <- (values - min(values))/diff(range(values))
x <- colorRamp(colors)(v)
rgb(x[,1], x[,2], x[,3], maxColorValue = 255)
}
cassini <- mlbench.cassini(500)
plot(cassini)
sig <- rings.spec@kernelf@kpar$sigma
A.rings <- exp(- sig * as.matrix(dist(rings)^2) ); #diag(A.rings) <- 0
# delete non-nearest neighbors
# k <- 3
# for (j in 1:dim(A.rings)[1]){
#   A.rings[j, which(A.rings[j,] > sort(A.rings[j,])[k])] <- 0
# }
Deg <- as.vector(A.rings %*% matrix(1,nrow = dim(rings)[1], ncol = 1))
# unnormalized graph Laplacian
# L.rings <- diag( Deg ) - A.rings
# normalized graph Laplacian
L.rings <- diag(rep(1,dim(rings)[1] )) - diag(Deg^{-1/2}) %*% A.rings %*% diag(Deg^{-1/2})
# RW normalized graph Laplacian
# L.rings <- diag(rep(1,dim(rings)[1] )) - diag(Deg^{-1}) %*% A.rings
par(mfrow = c(1,2))
im <- image(x = seq(1,dim(rings)[1],1), y = seq(1,dim(rings)[1],1), z = A.rings[,dim(rings)[1]:1],
xlab = '', ylab = '', main = "Affinity Matrix"
)
im <- image(x = seq(1,dim(rings)[1],1), y = seq(1,dim(rings)[1],1), z = L.rings[,dim(rings)[1]:1],
xlab = '', ylab = '', main = "Graph Laplacian"
)
# sig <- 1/spiral.spec@kernelf@kpar$sigma
sig <- spiral.spec@kernelf@kpar$sigma
# sig <- 1/(2*spiral.spec@kernelf@kpar$sigma^2)
A <- exp(- sig * as.matrix(dist(spirals)^2) ); diag(A) <- 0
# delete non-nearest neighbors
# k <- 3
# for (j in 1:dim(A)[1]){
#   A[j, which(A[j,] > sort(A[j,])[k]) ] <- 0
# }
Deg <- as.vector(A %*% matrix(1,nrow = dim(spirals)[1], ncol = 1))
# unnormalized
L <- diag( Deg ) - A
# symmetric normalized
L <- diag(rep(1,dim(spirals)[1])) - diag(D^(-1/2)) %*% A %*% diag(D^(-1/2))
# sig <- 1/spiral.spec@kernelf@kpar$sigma
sig <- spiral.spec@kernelf@kpar$sigma
# sig <- 1/(2*spiral.spec@kernelf@kpar$sigma^2)
A <- exp(- sig * as.matrix(dist(spirals)^2) ); diag(A) <- 0
# delete non-nearest neighbors
# k <- 3
# for (j in 1:dim(A)[1]){
#   A[j, which(A[j,] > sort(A[j,])[k]) ] <- 0
# }
Deg <- as.vector(A %*% matrix(1,nrow = dim(spirals)[1], ncol = 1))
# unnormalized
# L <- diag( Deg ) - A
# symmetric normalized
L <- diag(rep(1,dim(spirals)[1])) - diag(Deg^(-1/2)) %*% A %*% diag(Deg^(-1/2))
# RW normalized
# L <- diag(rep(1,dim(spirals)[1])) - diag(D^(-1)) %*% A
Aperm <- 0*A;
for (j in 1:2){
for (k in 1:2){
Aperm[((j-1)*150+1):(j*150), ((k-1)*150+1):(k*150)] <- A[which(spiral.spec@.Data == j), which(spiral.spec@.Data == k )]
}
}
Lperm <- diag( as.vector(Aperm %*% matrix(1,nrow = dim(spirals)[1], ncol = 1)) ) - Aperm
par(mfrow = c(2,2))
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = A[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Affinity Matrix", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = L[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Graph Laplacian", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = Aperm[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Permuted Affinity Matrix", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = Lperm[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Permuted Graph Laplacian", xaxt = 'n', yaxt = 'n'
)
set.seed(1)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, cache = FALSE, fig.align = 'center')
require(MASS)
require(ggplot2)
require(mclust)
require(cluster)
require(kernlab)
require(scatterplot3d)
require(gtools)
require(mlbench)
myColorRamp <- function(colors, values) {
v <- (values - min(values))/diff(range(values))
x <- colorRamp(colors)(v)
rgb(x[,1], x[,2], x[,3], maxColorValue = 255)
}
# sig <- 1/spiral.spec@kernelf@kpar$sigma
sig <- spiral.spec@kernelf@kpar$sigma
# sig <- 1/(2*spiral.spec@kernelf@kpar$sigma^2)
A <- exp(- sig * as.matrix(dist(spirals)^2) ); diag(A) <- 0
# delete non-nearest neighbors
# k <- 3
# for (j in 1:dim(A)[1]){
#   A[j, which(A[j,] > sort(A[j,])[k]) ] <- 0
# }
Deg <- as.vector(A %*% matrix(1,nrow = dim(spirals)[1], ncol = 1))
# unnormalized
L <- diag( Deg ) - A
# symmetric normalized
# L <- diag(rep(1,dim(spirals)[1])) - diag(Deg^(-1/2)) %*% A %*% diag(Deg^(-1/2))
# RW normalized
# L <- diag(rep(1,dim(spirals)[1])) - diag(D^(-1)) %*% A
Aperm <- 0*A;
for (j in 1:2){
for (k in 1:2){
Aperm[((j-1)*150+1):(j*150), ((k-1)*150+1):(k*150)] <- A[which(spiral.spec@.Data == j), which(spiral.spec@.Data == k )]
}
}
Lperm <- diag( as.vector(Aperm %*% matrix(1,nrow = dim(spirals)[1], ncol = 1)) ) - Aperm
par(mfrow = c(2,2))
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = A[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Affinity Matrix", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = L[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Graph Laplacian", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = Aperm[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Permuted Affinity Matrix", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = Lperm[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Permuted Graph Laplacian", xaxt = 'n', yaxt = 'n'
)
L.ev <- svd(L)
# normalize Y[,1:2] eigenvectors by row
for (j in 1:dim(spirals)[1]){
L.ev$u[j,] <- L.ev$u[j,]/sqrt(sum(L.ev$u[j,(dim(spirals)[1]-2):(dim(spirals)[1]-1)]^2))
}
plot(L.ev$u[,dim(spirals)[1]-1],L.ev$u[,dim(spirals)[1]-2], col = c("red","blue")[spiral.spec@.Data],
xlab = "2nd Eigenvector", ylab = "Third Eigenvector")
sig <- rings.spec@kernelf@kpar$sigma
A.rings <- exp(- sig * as.matrix(dist(rings)^2) ); #diag(A.rings) <- 0
# delete non-nearest neighbors
# k <- 3
# for (j in 1:dim(A.rings)[1]){
#   A.rings[j, which(A.rings[j,] > sort(A.rings[j,])[k])] <- 0
# }
Deg <- as.vector(A.rings %*% matrix(1,nrow = dim(rings)[1], ncol = 1))
# unnormalized graph Laplacian
L.rings <- diag( Deg ) - A.rings
# symmetric normalized graph Laplacian
# L.rings <- diag(rep(1,dim(rings)[1] )) - diag(Deg^{-1/2}) %*% A.rings %*% diag(Deg^{-1/2})
# RW normalized graph Laplacian
# L.rings <- diag(rep(1,dim(rings)[1] )) - diag(Deg^{-1}) %*% A.rings
par(mfrow = c(1,2))
im <- image(x = seq(1,dim(rings)[1],1), y = seq(1,dim(rings)[1],1), z = A.rings[,dim(rings)[1]:1],
xlab = '', ylab = '', main = "Affinity Matrix"
)
im <- image(x = seq(1,dim(rings)[1],1), y = seq(1,dim(rings)[1],1), z = L.rings[,dim(rings)[1]:1],
xlab = '', ylab = '', main = "Graph Laplacian"
)
L.rings.ev <- svd(L.rings)
plot(1:10,sort(L.rings.ev$d)[1:10], main = "Eigenvalues of L", xlab = "Index", ylab = "Eigenvalue" )
sc <- 1.1
for (j in 1:dim(rings)[1]){
L.rings.ev$u[j,] <- L.rings.ev$u[j,]/sqrt(sum(L.rings.ev$u[j,(dim(rings)[1]-3):(dim(rings)[1]-1)]^2))
}
scatterplot3d(x = L.rings.ev$u[,(3*N-1)],
y = L.rings.ev$u[,(3*N-2)],
z = L.rings.ev$u[,(3*N-3)],
xlab = '2nd Eigenvector', ylab = '3rd Eigenvector', zlab = '4th Eigenvector',
color = c("blue","red","black")[rings.spec@.Data], cex.symbols = 0.5,
xlim = c(-sc,sc), ylim = c(-sc,sc), zlim = c(-sc,sc), angle = 75)
# image(x = 1:3, y = 1:dim(rings)[1], z = t(Re(L.rings.ev$vectors[,(3*N-3):(3*N-1)])), xaxt = 'n', yaxt = 'n')
rings.spec.manual <- kmeans(L.rings.ev$u[,(3*N-3):(3*N-1)], centers = 3)
# for (n in 2:25){
#   temp <- kmeans(L.rings.ev$u[,(3*N-3):(3*N-1)], centers = 3)
#   if (temp$betweenss > rings.spec.manual$betweenss){ rings.spec.manual <- temp}
# }
plot(rings, col = c("red","blue","black")[rings.spec.manual$cluster],
xlab = '', ylab = '')
rings.spec.manual <- kmeans(L.rings.ev$u[,(3*N-3):(3*N-1)], centers = 3)
# for (n in 2:25){
#   temp <- kmeans(L.rings.ev$u[,(3*N-3):(3*N-1)], centers = 3)
#   if (temp$betweenss > rings.spec.manual$betweenss){ rings.spec.manual <- temp}
# }
plot(rings, col = c("red","blue","black")[rings.spec.manual$cluster],
xlab = '', ylab = '')
rings.spec.manual <- kmeans(L.rings.ev$u[,(3*N-3):(3*N-1)], centers = 3)
# for (n in 2:25){
#   temp <- kmeans(L.rings.ev$u[,(3*N-3):(3*N-1)], centers = 3)
#   if (temp$betweenss > rings.spec.manual$betweenss){ rings.spec.manual <- temp}
# }
plot(rings, col = c("red","blue","black")[rings.spec.manual$cluster],
xlab = '', ylab = '')
rm(list = ls())
cassini <- mlbench.cassini(500)
range(diag(var(cassini)))
range(diag(var(cassini$x)))
test <- specc(cassini$x,centers = 3)
sig <- rings.spec@kernelf@kpar$sigma
1/(2*range(diag(var(cassini$x)))^2)
1/(range(diag(var(cassini$x)))^2)
log(range(diag(var(cassini$x)))/2)
data("spirals")
spirals[ permute(1:dim(spirals)[1]), ] <- spirals
plot(spirals, xlab = '', ylab ='')
spiral.spec <- specc(spirals, centers = 2)
plot(spirals, xlab = '', ylab = '', main = 'Spectral Clustering',
col = c("red","blue")[spiral.spec@.Data])
# sig <- 1/spiral.spec@kernelf@kpar$sigma
sig <- spiral.spec@kernelf@kpar$sigma
# sig <- 1/(2*spiral.spec@kernelf@kpar$sigma^2)
A <- exp(- as.matrix(dist(spirals)^2) / (2*sig^2) ); diag(A) <- 0
# delete non-nearest neighbors
# k <- 3
# for (j in 1:dim(A)[1]){
#   A[j, which(A[j,] > sort(A[j,])[k]) ] <- 0
# }
Deg <- as.vector(A %*% matrix(1,nrow = dim(spirals)[1], ncol = 1))
# unnormalized
L <- diag( Deg ) - A
# symmetric normalized
# L <- diag(rep(1,dim(spirals)[1])) - diag(Deg^(-1/2)) %*% A %*% diag(Deg^(-1/2))
# RW normalized
# L <- diag(rep(1,dim(spirals)[1])) - diag(D^(-1)) %*% A
Aperm <- 0*A;
for (j in 1:2){
for (k in 1:2){
Aperm[((j-1)*150+1):(j*150), ((k-1)*150+1):(k*150)] <- A[which(spiral.spec@.Data == j), which(spiral.spec@.Data == k )]
}
}
Lperm <- diag( as.vector(Aperm %*% matrix(1,nrow = dim(spirals)[1], ncol = 1)) ) - Aperm
par(mfrow = c(2,2))
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = A[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Affinity Matrix", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = L[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Graph Laplacian", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = Aperm[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Permuted Affinity Matrix", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = Lperm[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Permuted Graph Laplacian", xaxt = 'n', yaxt = 'n'
)
plot(sort(svd(L)$d)[1:10], ylab = "Eigenvalues" )
sig <- rings.spec@kernelf@kpar$sigma
rings.spec <- specc(rings, centers = 3)
N <- 250
theta <- runif(3*N, min = 0, max = 2*pi);
r = c(runif(N, min = 0.9,max = 1.1),runif(N, min = 1.9,max = 2.1),runif(N, min = 2.9,max = 3.1) )
rings <-  cbind(cos(theta),sin(theta)) * cbind(r,r)
# rings[ permute(1:(3*N)), ] <- rings
# plot(rings, xlab = '', ylab = '',
#      col = c("red","blue","black")[c(rep(1,N),rep(2,N),rep(3,N))])
plot(rings, xlab = '', ylab = '')
rings.spec <- specc(rings, centers = 3)
plot(rings, xlab = '', ylab = '', main = 'Spectral Clustering',
col = c("red","blue","black")[rings.spec@.Data])
sig <- rings.spec@kernelf@kpar$sigma
A.rings <- exp(-  sig *as.matrix(dist(rings)^2) ); #diag(A.rings) <- 0
# delete non-nearest neighbors
# k <- 3
# for (j in 1:dim(A.rings)[1]){
#   A.rings[j, which(A.rings[j,] > sort(A.rings[j,])[k])] <- 0
# }
Deg <- as.vector(A.rings %*% matrix(1,nrow = dim(rings)[1], ncol = 1))
# unnormalized graph Laplacian
L.rings <- diag( Deg ) - A.rings
# symmetric normalized graph Laplacian
# L.rings <- diag(rep(1,dim(rings)[1] )) - diag(Deg^{-1/2}) %*% A.rings %*% diag(Deg^{-1/2})
# RW normalized graph Laplacian
# L.rings <- diag(rep(1,dim(rings)[1] )) - diag(Deg^{-1}) %*% A.rings
par(mfrow = c(1,2))
im <- image(x = seq(1,dim(rings)[1],1), y = seq(1,dim(rings)[1],1), z = A.rings[,dim(rings)[1]:1],
xlab = '', ylab = '', main = "Affinity Matrix"
)
im <- image(x = seq(1,dim(rings)[1],1), y = seq(1,dim(rings)[1],1), z = L.rings[,dim(rings)[1]:1],
xlab = '', ylab = '', main = "Graph Laplacian"
)
set.seed(1)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, cache = FALSE, fig.align = 'center')
require(MASS)
require(ggplot2)
require(mclust)
require(cluster)
require(kernlab)
require(scatterplot3d)
require(gtools)
require(mlbench)
myColorRamp <- function(colors, values) {
v <- (values - min(values))/diff(range(values))
x <- colorRamp(colors)(v)
rgb(x[,1], x[,2], x[,3], maxColorValue = 255)
}
# sig <- 1/spiral.spec@kernelf@kpar$sigma
sig <- 100*spiral.spec@kernelf@kpar$sigma
# sig <- 1/(2*spiral.spec@kernelf@kpar$sigma^2)
A <- exp(- sig * as.matrix(dist(spirals)^2) ); diag(A) <- 0
# delete non-nearest neighbors
# k <- 3
# for (j in 1:dim(A)[1]){
#   A[j, which(A[j,] > sort(A[j,])[k]) ] <- 0
# }
Deg <- as.vector(A %*% matrix(1,nrow = dim(spirals)[1], ncol = 1))
# unnormalized
L <- diag( Deg ) - A
# symmetric normalized
# L <- diag(rep(1,dim(spirals)[1])) - diag(Deg^(-1/2)) %*% A %*% diag(Deg^(-1/2))
# RW normalized
# L <- diag(rep(1,dim(spirals)[1])) - diag(D^(-1)) %*% A
Aperm <- 0*A;
for (j in 1:2){
for (k in 1:2){
Aperm[((j-1)*150+1):(j*150), ((k-1)*150+1):(k*150)] <- A[which(spiral.spec@.Data == j), which(spiral.spec@.Data == k )]
}
}
Lperm <- diag( as.vector(Aperm %*% matrix(1,nrow = dim(spirals)[1], ncol = 1)) ) - Aperm
par(mfrow = c(2,2))
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = A[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Affinity Matrix", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = L[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Graph Laplacian", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = Aperm[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Permuted Affinity Matrix", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = Lperm[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Permuted Graph Laplacian", xaxt = 'n', yaxt = 'n'
)
# sig <- 1/spiral.spec@kernelf@kpar$sigma
sig <- spiral.spec@kernelf@kpar$sigma
# sig <- 1/(2*spiral.spec@kernelf@kpar$sigma^2)
A <- exp(- sig * as.matrix(dist(spirals)^2) ); diag(A) <- 0
# delete non-nearest neighbors
# k <- 3
# for (j in 1:dim(A)[1]){
#   A[j, which(A[j,] > sort(A[j,])[k]) ] <- 0
# }
Deg <- as.vector(A %*% matrix(1,nrow = dim(spirals)[1], ncol = 1))
# unnormalized
L <- diag( Deg ) - A
# symmetric normalized
# L <- diag(rep(1,dim(spirals)[1])) - diag(Deg^(-1/2)) %*% A %*% diag(Deg^(-1/2))
# RW normalized
# L <- diag(rep(1,dim(spirals)[1])) - diag(D^(-1)) %*% A
Aperm <- 0*A;
for (j in 1:2){
for (k in 1:2){
Aperm[((j-1)*150+1):(j*150), ((k-1)*150+1):(k*150)] <- A[which(spiral.spec@.Data == j), which(spiral.spec@.Data == k )]
}
}
Lperm <- diag( as.vector(Aperm %*% matrix(1,nrow = dim(spirals)[1], ncol = 1)) ) - Aperm
par(mfrow = c(2,2))
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = A[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Affinity Matrix", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = L[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Graph Laplacian", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = Aperm[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Permuted Affinity Matrix", xaxt = 'n', yaxt = 'n'
)
image(x = seq(1,dim(spirals)[1],1), y = seq(1,dim(spirals)[1],1), z = Lperm[,dim(spirals)[1]:1],
xlab = '', ylab = '', main = "Permuted Graph Laplacian", xaxt = 'n', yaxt = 'n'
)
theta1 <- runif(30, min = -pi/8, max =   pi/8); phi1 <- runif(30, min =     0, max = 2*pi  )
theta2 <- runif(30, min =  pi/4, max = 3*pi/4); phi2 <- runif(30, min = -pi/4, max =   pi/4)
theta3 <- runif(30, min =  pi/4, max = 3*pi/4); phi3 <- runif(30, min =  pi/4, max = 3*pi/4)
p2.data <- rbind( cbind(sin(theta1)*cos(phi1), sin(theta1)*sin(phi1), cos(theta1)),
cbind(sin(theta2)*cos(phi2), sin(theta2)*sin(phi2), cos(theta2)),
cbind(sin(theta3)*cos(phi3), sin(theta3)*sin(phi3), cos(theta3))
) +
matrix(rnorm(90*3, mean = 0, sd = 0.6), nrow = 90)
scatterplot3d(p2.data,
xlab = 'x', ylab = 'y', zlab = 'z',
color = c("red","blue","black")[c(rep(1,30),rep(2,30),rep(3,30) )],
angle = 75)
knitr::opts_chunk$set(echo = FALSE, cache = TRUE, message = FALSE, fig.align = 'center')
set.seed(1) # for reproducibility of results
require(mclust)
require(cluster)
require(kernlab)
require(scatterplot3d)
load("pset7.rData")
myColorRamp <- function(colors, values) {
v <- (values - min(values))/diff(range(values))
x <- colorRamp(colors)(v)
rgb(x[,1], x[,2], x[,3], maxColorValue = 255)
}
get_mode <- function(data){
# assumes there is a unique mode
un <- unique(data)
mo <- un[1]
if (length(un) == 1){mo = un}
else {
for (j in 2:length(un)){
if (sum(data == un[j]) > sum(data == mo)){ mo <- un[j]}
}
}
return(mo);
}
